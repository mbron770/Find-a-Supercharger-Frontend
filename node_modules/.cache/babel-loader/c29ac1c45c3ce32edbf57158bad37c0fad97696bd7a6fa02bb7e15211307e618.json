{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, Marker, InfoWindowF } from \"@react-google-maps/api\";\nimport Search from \"./search\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL = 'http://localhost:3000/fuel_stations';\nfunction Map(_ref) {\n  _s();\n  let {\n    stations\n  } = _ref;\n  const containerStyle = {\n    width: \"100vw\",\n    height: \"100vh\"\n  };\n  const [currentLocation, setCurrentLocation] = useState(null);\n  const [selectedStation, setSelectedStation] = useState(null);\n  const [distance, setDistance] = useState(null);\n  const [duration, setDuration] = useState(null);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCurrentLocation({\n          lat: latitude,\n          lng: longitude\n        });\n      }, error => {\n        console.error(\"Error getting current location:\", error);\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n  useEffect(() => {\n    if (selectedStation && currentLocation) {\n      const directionsService = new window.google.maps.DirectionsService();\n      const request = {\n        origin: currentLocation,\n        destination: {\n          lat: selectedStation.latitude,\n          lng: selectedStation.longitude\n        },\n        travelMode: \"DRIVING\",\n        drivingOptions: {\n          departureTime: new Date()\n        }\n      };\n      directionsService.route(request, handleDirectionsResponse);\n    }\n  }, [selectedStation, currentLocation]);\n  function handleSelectedStation(station) {\n    setSelectedStation(station);\n  }\n  function handleCloseInfoWindow() {\n    setSelectedStation(null);\n  }\n  function handleDirectionsResponse(response, status) {\n    if (status === \"OK\") {\n      const leg = response.routes[0].legs[0];\n      setDistance(leg.distance.text);\n      setDuration(leg.duration.text);\n    } else {\n      console.error(\"Directions request failed:\", status);\n      setDistance(null);\n      setDuration(null);\n    }\n  }\n  function handleGetDirections() {\n    if (currentLocation && selectedStation) {\n      const origin = `${currentLocation.lat},${currentLocation.lng}`;\n      const destination = `${selectedStation.latitude},${selectedStation.longitude}`;\n      const directionsUrl = `https://www.google.com/maps/dir/?api=1&origin=${origin}&destination=${destination}`;\n      window.open(directionsUrl, \"_blank\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s(Map, \"jmu7Dt5QHn3dLT1oSXh1L87B/ts=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","Marker","InfoWindowF","Search","Fragment","_Fragment","jsxDEV","_jsxDEV","URL","Map","_ref","_s","stations","containerStyle","width","height","currentLocation","setCurrentLocation","selectedStation","setSelectedStation","distance","setDistance","duration","setDuration","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","lat","lng","error","console","directionsService","window","google","maps","DirectionsService","request","origin","destination","travelMode","drivingOptions","departureTime","Date","route","handleDirectionsResponse","handleSelectedStation","station","handleCloseInfoWindow","response","status","leg","routes","legs","text","handleGetDirections","directionsUrl","open","_c","$RefreshReg$"],"sources":["/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/map.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { GoogleMap, Marker, InfoWindowF } from \"@react-google-maps/api\";\nimport Search from \"./search\"\n\n\nconst URL = 'http://localhost:3000/fuel_stations';\n\nfunction Map({stations}) {\n  const containerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n  };\n\n  const [currentLocation, setCurrentLocation] = useState(null);\n  const [selectedStation, setSelectedStation] = useState(null);\n  const [distance, setDistance] = useState(null);\n  const [duration, setDuration] = useState(null);\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setCurrentLocation({ lat: latitude, lng: longitude });\n        },\n        (error) => {\n          console.error(\"Error getting current location:\", error);\n        }\n      );\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  useEffect(() => {\n    if (selectedStation && currentLocation) {\n      const directionsService = new window.google.maps.DirectionsService();\n      const request = {\n        origin: currentLocation,\n        destination: {\n          lat: selectedStation.latitude,\n          lng: selectedStation.longitude,\n        },\n        travelMode: \"DRIVING\",\n        drivingOptions: {\n          departureTime: new Date(),\n        },\n      };\n      directionsService.route(request, handleDirectionsResponse);\n    }\n  }, [selectedStation, currentLocation]);\n\n  function handleSelectedStation(station) {\n    setSelectedStation(station);\n  }\n\n  function handleCloseInfoWindow() {\n    setSelectedStation(null);\n  }\n\n  function handleDirectionsResponse(response, status) {\n    if (status === \"OK\") {\n      const leg = response.routes[0].legs[0];\n      setDistance(leg.distance.text);\n      setDuration(leg.duration.text);\n    } else {\n      console.error(\"Directions request failed:\", status);\n      setDistance(null);\n      setDuration(null);\n    }\n  }\n\n  function handleGetDirections() {\n    if (currentLocation && selectedStation) {\n      const origin = `${currentLocation.lat},${currentLocation.lng}`;\n      const destination = `${selectedStation.latitude},${selectedStation.longitude}`;\n      const directionsUrl = `https://www.google.com/maps/dir/?api=1&origin=${origin}&destination=${destination}`;\n      window.open(directionsUrl, \"_blank\");\n    }\n  }\n\n  return (\n    <>\n    \n    </>\n    \n  );\n}\n\nexport default Map;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}