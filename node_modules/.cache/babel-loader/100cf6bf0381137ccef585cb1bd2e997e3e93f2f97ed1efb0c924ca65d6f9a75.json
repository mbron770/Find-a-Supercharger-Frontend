{"ast":null,"code":"// import React from \"react\";\n// import { v4 as uuidv4 } from \"uuid\";\n// import Individualcard from \"./Individualcard\";\n// import Col from \"react-bootstrap/Col\";\n// import Row from \"react-bootstrap/Row\";\n// import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n// import { useState, useEffect } from \"react\";\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n// import Search from \"./search\";\n\n// function CardDisplay({\n//   stations,\n//   currentLocation,\n//   isLocationLoaded,\n//   setStations,\n// }) {\n//   const a ={...currentLocation}\n//   const [address, setAddress] = useState('');\n//   const [lat,setLat] = useState(a.lat)\n//   const [lng,setLng] = useState(a.lng)\n\n//   const calculateDistances = () => {\n//     const yourLatitude = lat;\n//     const yourLongitude = lng;\n\n//     return stations\n//       .map((station) => {\n//         const stationLatitude = station.latitude;\n//         const stationLongitude = station.longitude;\n\n//         const distance = calculateDistance(\n//           yourLatitude,\n//           yourLongitude,\n//           stationLatitude,\n//           stationLongitude\n//         );\n\n//         return {\n//           ...station,\n//           distance: distance,\n//         };\n//       })\n//       .sort((a, b) => a.distance - b.distance)\n//       .slice(0, 32);\n//   };\n\n//   const calculateDistance = (lat1, lon1, lat2, lon2) => {\n//     const R = 3959; // Radius of the Earth in miles\n//     const dLat = deg2rad(lat2 - lat1);\n//     const dLon = deg2rad(lon2 - lon1);\n//     const a =\n//       Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n//       Math.cos(deg2rad(lat1)) *\n//         Math.cos(deg2rad(lat2)) *\n//         Math.sin(dLon / 2) *\n//         Math.sin(dLon / 2);\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//     const distance = R * c; // Distance in miles\n//     return distance;\n//   };\n\n//   const deg2rad = (deg) => {\n//     return deg * (Math.PI / 180);\n//   };\n\n//   const closestStations =\n//     isLocationLoaded && currentLocation ? calculateDistances() : [];\n\n//   return (\n//     <>\n//     <Search currentLocation = {currentLocation} \n//     setLat = {setLat}\n//     setLng = {setLng}\n//     address={address} \n//     setAddress = {setAddress}/>\n\n// <div style={{\n//       display: \"flex\",\n//       justifyContent: \"center\",\n//       marginTop: '150px',\n//       marginBottom: '50px'\n//     }}>\n\n//      <Row\n//        xs={1}\n//        md={4}\n//        className=\"g-4\"\n//       //  style={{\n//       //    marginLeft: \"100px\",\n//       //    marginRight: \"100px\",\n//       //    display: \"flex\",\n//       //    marginTop: '150px'\n//       //  }}\n\n//       style={{\n//         width: \"100%\",\n//         marginLeft: \"100px\",\n//         marginRight: \"100px\",\n//         display: \"flex\",\n//         flexWrap: \"wrap\",\n//         display: \"flex\",\n//       justifyContent: \"center\",\n//       top: '12%',\n//       //marginBottom: '50px'\n//       }}\n//      >\n//        {closestStations.map((station) => (\n//          <Col key={station}>\n//            <div\n//              style={{\n//                display: \"flex\",\n//                flexDirection: \"column\",\n//                height: \"100%\",\n//              }}\n//            >\n//              <Individualcard\n//                key={station.id}\n//                station={station}\n//                stations={stations}\n//                setStations={setStations}\n//                stationLatitude={station.latitude}\n//                stationLongitude={station.longitude}\n//                lat = {lat}\n//                lng = {lng}\n//              />\n//            </div>\n//          </Col>\n//        ))}\n//      </Row>\n\n//    </div>\n\n//     </>\n\n//   );\n// }\n\n// export default CardDisplay;","map":{"version":3,"names":[],"sources":["/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/carddisplay.jsx"],"sourcesContent":["// import React from \"react\";\n// import { v4 as uuidv4 } from \"uuid\";\n// import Individualcard from \"./Individualcard\";\n// import Col from \"react-bootstrap/Col\";\n// import Row from \"react-bootstrap/Row\";\n// import Form from 'react-bootstrap/Form';\n// import Button from 'react-bootstrap/Button';\n// import { useState, useEffect } from \"react\";\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n// import Search from \"./search\";\n\n// function CardDisplay({\n//   stations,\n//   currentLocation,\n//   isLocationLoaded,\n//   setStations,\n// }) {\n//   const a ={...currentLocation}\n//   const [address, setAddress] = useState('');\n//   const [lat,setLat] = useState(a.lat)\n//   const [lng,setLng] = useState(a.lng)\n\n\n//   const calculateDistances = () => {\n//     const yourLatitude = lat;\n//     const yourLongitude = lng;\n\n//     return stations\n//       .map((station) => {\n//         const stationLatitude = station.latitude;\n//         const stationLongitude = station.longitude;\n\n//         const distance = calculateDistance(\n//           yourLatitude,\n//           yourLongitude,\n//           stationLatitude,\n//           stationLongitude\n//         );\n\n//         return {\n//           ...station,\n//           distance: distance,\n//         };\n//       })\n//       .sort((a, b) => a.distance - b.distance)\n//       .slice(0, 32);\n//   };\n\n//   const calculateDistance = (lat1, lon1, lat2, lon2) => {\n//     const R = 3959; // Radius of the Earth in miles\n//     const dLat = deg2rad(lat2 - lat1);\n//     const dLon = deg2rad(lon2 - lon1);\n//     const a =\n//       Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n//       Math.cos(deg2rad(lat1)) *\n//         Math.cos(deg2rad(lat2)) *\n//         Math.sin(dLon / 2) *\n//         Math.sin(dLon / 2);\n//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//     const distance = R * c; // Distance in miles\n//     return distance;\n//   };\n\n//   const deg2rad = (deg) => {\n//     return deg * (Math.PI / 180);\n//   };\n\n//   const closestStations =\n//     isLocationLoaded && currentLocation ? calculateDistances() : [];\n\n  \n\n//   return (\n//     <>\n//     <Search currentLocation = {currentLocation} \n//     setLat = {setLat}\n//     setLng = {setLng}\n//     address={address} \n//     setAddress = {setAddress}/>\n\n// <div style={{\n//       display: \"flex\",\n//       justifyContent: \"center\",\n//       marginTop: '150px',\n//       marginBottom: '50px'\n//     }}>\n     \n     \n      \n//      <Row\n//        xs={1}\n//        md={4}\n//        className=\"g-4\"\n//       //  style={{\n//       //    marginLeft: \"100px\",\n//       //    marginRight: \"100px\",\n//       //    display: \"flex\",\n//       //    marginTop: '150px'\n//       //  }}\n\n//       style={{\n//         width: \"100%\",\n//         marginLeft: \"100px\",\n//         marginRight: \"100px\",\n//         display: \"flex\",\n//         flexWrap: \"wrap\",\n//         display: \"flex\",\n//       justifyContent: \"center\",\n//       top: '12%',\n//       //marginBottom: '50px'\n//       }}\n//      >\n//        {closestStations.map((station) => (\n//          <Col key={station}>\n//            <div\n//              style={{\n//                display: \"flex\",\n//                flexDirection: \"column\",\n//                height: \"100%\",\n//              }}\n//            >\n//              <Individualcard\n//                key={station.id}\n//                station={station}\n//                stations={stations}\n//                setStations={setStations}\n//                stationLatitude={station.latitude}\n//                stationLongitude={station.longitude}\n//                lat = {lat}\n//                lng = {lng}\n//              />\n//            </div>\n//          </Col>\n//        ))}\n//      </Row>\n     \n//    </div>\n    \n//     </>\n    \n   \n    \n//   );\n// }\n\n// export default CardDisplay;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAIA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}