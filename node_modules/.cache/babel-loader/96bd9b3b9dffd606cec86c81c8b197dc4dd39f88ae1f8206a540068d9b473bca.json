{"ast":null,"code":"var _jsxFileName = \"/Users/tabo/Development/code/phase-2/phase-2-Project/Find-a-Supercharger-Frontend/src/components/carddisplay.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Individualcard from \"./individualcard\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport { useState, useEffect } from \"react\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport Search from \"./search\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardDisplay(_ref) {\n  _s();\n  let {\n    stations,\n    currentLocation,\n    isLocationLoaded,\n    setStations\n  } = _ref;\n  // const a = { ...currentLocation };\n  const [address, setAddress] = useState(\"\");\n  const [lat, setLat] = useState(currentLocation.lat);\n  const [lng, setLng] = useState(currentLocation.lng);\n\n  // useEffect(() => {\n  //   if (currentLocation) {\n  //     setLat(currentLocation.lat);\n  //     setLng(currentLocation.lng);\n  //   }\n  // }, [currentLocation]);\n\n  //console.log(address);\n\n  // useEffect(() => {\n  //   if (address) {\n  //     setLat(currentLocation.lat);\n  //     setLng(currentLocation.lng);\n  //   }\n  // },[address])\n\n  //console.log (lat,'    ',lng)\n\n  const calculateDistances = () => {\n    const yourLatitude = lat;\n    const yourLongitude = lng;\n    return stations.map(station => {\n      const stationLatitude = station.latitude;\n      const stationLongitude = station.longitude;\n      const distance = calculateDistance(yourLatitude, yourLongitude, stationLatitude, stationLongitude);\n      return {\n        ...station,\n        distance: distance\n      };\n    }).sort((a, b) => a.distance - b.distance).slice(0, 32);\n  };\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 3959; // Radius of the Earth in miles\n    const dLat = deg2rad(lat2 - lat1);\n    const dLon = deg2rad(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c; // Distance in miles\n    return distance;\n  };\n  const deg2rad = deg => {\n    return deg * (Math.PI / 180);\n  };\n  const closestStations = isLocationLoaded && currentLocation ? calculateDistances() : [];\n  const handleAddressSelect = async selectedAddress => {\n    setAddress(selectedAddress);\n    try {\n      const results = await geocodeByAddress(selectedAddress);\n      const selectedLocation = await getLatLng(results[0]);\n      const {\n        lat,\n        lng\n      } = selectedLocation;\n      console.log(`Latitude: ${lat}, Longitude: ${lng}`);\n      setLat(lat);\n      setLng(lng);\n      const addressArr = selectedAddress.split(\", \");\n    } catch (error) {\n      console.log(\"Error:\", error);\n    }\n  };\n  function handleAddressChange(selectedAddress) {\n    //console.log(address,\"   parent\")\n    if (address.length === 1) {\n      //console.log (\"DONE\")\n      setLat(currentLocation.lat);\n      setLng(currentLocation.lng);\n    }\n    setAddress(prevAddr => selectedAddress);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      handleAddressChange: handleAddressChange,\n      address: address,\n      handleAddressSelect: handleAddressSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      xs: 1,\n      md: 4,\n      className: \"g-4\",\n      style: {\n        marginLeft: \"100px\",\n        marginRight: \"100px\",\n        display: \"flex\"\n      },\n      children: closestStations.map(station => /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            height: \"100%\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Individualcard, {\n            station: station,\n            stations: stations,\n            setStations: setStations,\n            stationLatitude: station.latitude,\n            stationLongitude: station.longitude,\n            lat: lat,\n            lng: lng\n          }, station.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this)\n      }, uuidv4(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(CardDisplay, \"TG9nsy3UDJbo6ZzkX5tDGSY3Hy0=\");\n_c = CardDisplay;\nexport default CardDisplay;\nvar _c;\n$RefreshReg$(_c, \"CardDisplay\");","map":{"version":3,"names":["React","v4","uuidv4","Individualcard","Col","Row","useState","useEffect","PlacesAutocomplete","geocodeByAddress","getLatLng","Search","jsxDEV","_jsxDEV","CardDisplay","_ref","_s","stations","currentLocation","isLocationLoaded","setStations","address","setAddress","lat","setLat","lng","setLng","calculateDistances","yourLatitude","yourLongitude","map","station","stationLatitude","latitude","stationLongitude","longitude","distance","calculateDistance","sort","a","b","slice","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","Math","sin","cos","c","atan2","sqrt","deg","PI","closestStations","handleAddressSelect","selectedAddress","results","selectedLocation","console","log","addressArr","split","error","handleAddressChange","length","prevAddr","children","fileName","_jsxFileName","lineNumber","columnNumber","xs","md","className","style","marginLeft","marginRight","display","flexDirection","height","id","_c","$RefreshReg$"],"sources":["/Users/tabo/Development/code/phase-2/phase-2-Project/Find-a-Supercharger-Frontend/src/components/carddisplay.jsx"],"sourcesContent":["import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Individualcard from \"./individualcard\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport { useState, useEffect } from \"react\";\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from \"react-places-autocomplete\";\nimport Search from \"./search\";\n\nfunction CardDisplay({\n  stations,\n  currentLocation,\n  isLocationLoaded,\n  setStations,\n}) {\n  // const a = { ...currentLocation };\n  const [address, setAddress] = useState(\"\");\n  const [lat, setLat] = useState(currentLocation.lat);\n  const [lng, setLng] = useState(currentLocation.lng);\n\n  // useEffect(() => {\n  //   if (currentLocation) {\n  //     setLat(currentLocation.lat);\n  //     setLng(currentLocation.lng);\n  //   }\n  // }, [currentLocation]);\n\n  //console.log(address);\n\n  // useEffect(() => {\n  //   if (address) {\n  //     setLat(currentLocation.lat);\n  //     setLng(currentLocation.lng);\n  //   }\n  // },[address])\n\n  //console.log (lat,'    ',lng)\n\n  const calculateDistances = () => {\n    const yourLatitude = lat;\n    const yourLongitude = lng;\n\n    return stations\n      .map((station) => {\n        const stationLatitude = station.latitude;\n        const stationLongitude = station.longitude;\n\n        const distance = calculateDistance(\n          yourLatitude,\n          yourLongitude,\n          stationLatitude,\n          stationLongitude\n        );\n\n        return {\n          ...station,\n          distance: distance,\n        };\n      })\n      .sort((a, b) => a.distance - b.distance)\n      .slice(0, 32);\n  };\n\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 3959; // Radius of the Earth in miles\n    const dLat = deg2rad(lat2 - lat1);\n    const dLon = deg2rad(lon2 - lon1);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(deg2rad(lat1)) *\n        Math.cos(deg2rad(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c; // Distance in miles\n    return distance;\n  };\n\n  const deg2rad = (deg) => {\n    return deg * (Math.PI / 180);\n  };\n\n  const closestStations =\n    isLocationLoaded && currentLocation ? calculateDistances() : [];\n\n  const handleAddressSelect = async (selectedAddress) => {\n    setAddress(selectedAddress);\n\n    try {\n      const results = await geocodeByAddress(selectedAddress);\n      const selectedLocation = await getLatLng(results[0]);\n      const { lat, lng } = selectedLocation;\n      console.log(`Latitude: ${lat}, Longitude: ${lng}`);\n      setLat(lat);\n      setLng(lng);\n      const addressArr = selectedAddress.split(\", \");\n    } catch (error) {\n      console.log(\"Error:\", error);\n    }\n  };\n\n  function handleAddressChange(selectedAddress) {\n    //console.log(address,\"   parent\")\n    if (address.length === 1) {\n      //console.log (\"DONE\")\n      setLat(currentLocation.lat);\n      setLng(currentLocation.lng);\n    }\n    setAddress((prevAddr) => selectedAddress);\n  }\n\n  return (\n    <div>\n      <br></br>\n      <br></br>\n      <br></br>\n      <Search\n        handleAddressChange={handleAddressChange}\n        address={address}\n        handleAddressSelect={handleAddressSelect}\n      />\n      <br></br>\n      <Row\n        xs={1}\n        md={4}\n        className=\"g-4\"\n        style={{\n          marginLeft: \"100px\",\n          marginRight: \"100px\",\n          display: \"flex\",\n        }}\n      >\n        {closestStations.map((station) => (\n          <Col key={uuidv4()}>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                height: \"100%\",\n              }}\n            >\n              <Individualcard\n                key={station.id}\n                station={station}\n                stations={stations}\n                setStations={setStations}\n                stationLatitude={station.latitude}\n                stationLongitude={station.longitude}\n                lat={lat}\n                lng={lng}\n              />\n            </div>\n          </Col>\n        ))}\n      </Row>\n      <br></br>\n    </div>\n  );\n}\n\nexport default CardDisplay;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}