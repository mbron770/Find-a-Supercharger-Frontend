{"ast":null,"code":"// import React, { useState } from \"react\";\n// import Form from \"react-bootstrap/Form\";\n// import Button from \"react-bootstrap/Button\";\n// import InputGroup from \"react-bootstrap/InputGroup\";\n// import PlacesAutocomplete, {\n//   geocodeByAddress,\n//   getLatLng,\n// } from \"react-places-autocomplete\";\n\n// const stateAbbreviations = [\n//   \"AL\",\n//   \"AK\",\n//   \"AZ\",\n//   \"AR\",\n//   \"CA\",\n//   \"CO\",\n//   \"CT\",\n//   \"DE\",\n//   \"FL\",\n//   \"GA\",\n//   \"HI\",\n//   \"ID\",\n//   \"IL\",\n//   \"IN\",\n//   \"IA\",\n//   \"KS\",\n//   \"KY\",\n//   \"LA\",\n//   \"ME\",\n//   \"MD\",\n//   \"MA\",\n//   \"MI\",\n//   \"MN\",\n//   \"MS\",\n//   \"MO\",\n//   \"MT\",\n//   \"NE\",\n//   \"NV\",\n//   \"NH\",\n//   \"NJ\",\n//   \"NM\",\n//   \"NY\",\n//   \"NC\",\n//   \"ND\",\n//   \"OH\",\n//   \"OK\",\n//   \"OR\",\n//   \"PA\",\n//   \"RI\",\n//   \"SC\",\n//   \"SD\",\n//   \"TN\",\n//   \"TX\",\n//   \"UT\",\n//   \"VT\",\n//   \"VA\",\n//   \"WA\",\n//   \"WV\",\n//   \"WI\",\n//   \"WY\",\n// ];\n\n// function Newstation() {\n//   const [stationName, setStationName] = useState(\"\");\n//   const [address, setAddress] = useState(\"\");\n//   const [city, setCity] = useState(\"\");\n//   const [state, setState] = useState(\"\");\n//   const [pricing, setPricing] = useState(\"\");\n//   const [review, setReview] = useState([]);\n//   const [chargerType, setChargerType] = useState(\"\");\n//   const [lat, setLat] = useState(0);\n//   const [lng, setLng] = useState(0);\n//   const [accessDaysTime, setAccessDayTime] = useState(\"\");\n//   const [zip, setZip] = useState(\"\");\n\n//   function handleAddressChange(selectedAddress) {\n//     setAddress(selectedAddress);\n//   }\n\n//   const handleAddressSelect = async (selectedAddress) => {\n//     setAddress(selectedAddress);\n\n//     try {\n//       const results = await geocodeByAddress(selectedAddress);\n//       const selectedLocation = await getLatLng(results[0]);\n//       const { lat, lng } = selectedLocation;\n//       console.log(`Latitude: ${lat}, Longitude: ${lng}`);\n//       //console.log (selectedAddress)\n//       setLat(lat);\n//       setLng(lng);\n//       const addressArr = selectedAddress.split(\", \");\n//       // console.log (addressArr[addressArr.length-2])\n//       // console.log (addressArr[addressArr.length-3])\n//       setCity(addressArr[addressArr.length - 3]);\n//       setState(addressArr[addressArr.length - 2]);\n//     } catch (error) {\n//       console.log(\"Error:\", error);\n//     }\n//   };\n\n//   function handleSubmit(event) {\n//     event.preventDefault();\n\n//     const newStation = {\n//       access_days_time: accessDaysTime,\n//       station_name: stationName,\n//       station_phone: \"877-798-3752\",\n//       latitude: lat,\n//       longitude: lng,\n//       city: city,\n//       state: state,\n//       street_address: address.split(\",\")[0],\n//       country: \"US\",\n//       zip: zip,\n//       comments: review,\n//       ev_pricing: pricing,\n//     };\n//     if (\n//       city !== \"\" &&\n//       state !== \"\" &&\n//       address !== \"\" &&\n//       pricing !== \"\" &&\n//       stationName !== \"\"\n//     ) {\n//       fetch(\"http://localhost:3000/fuel_stations\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-type\": \"application/json\",\n//           Accept: \"application/json\",\n//         },\n//         body: JSON.stringify(newStation),\n//       })\n//         .then((response) => response.json())\n//         .then((data) => {\n//           console.log(newStation);\n//           setStationName(\"\");\n//           setAddress(\"\");\n//           setCity(\"\");\n//           setState(\"\");\n//           setPricing(\"\");\n//           setReview(\"\");\n//           setChargerType(\"\");\n//           setAccessDayTime(\"\");\n//           setZip(\"\");\n//         });\n//     } else {\n//       alert(\"Please complete the form\");\n//     }\n//   }\n\n//   return (\n//     <div\n//       className=\"tcl-video-container\"\n//       style={{\n//         position: \"fixed\",\n//         top: 0,\n//         left: 0,\n//         width: \"100vw\",\n//         height: \"100vh\",\n//         zIndex: -1,\n//         overflow: \"hidden\",\n//       }}\n//     >\n//       <video\n//         className=\"tcl-asset tcl-video__asset lozad tcl-objectfit-position tcl-objectfit-position--center visible-no-fade-in\"\n//         preload=\"auto\"\n//         playsInline\n//         data-autoplay-desktop={true}\n//         data-autoplay-portrait={true}\n//         data-autoplay-mobile={true}\n//         data-play-on-hover={false}\n//         muted\n//         loop\n//         controls={false}\n//         data-src-desktop=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Desktop-NA.mp4\"\n//         data-src-portrait=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Desktop-NA.mp4\"\n//         data-src-mobile=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Mobile-NA.mp4\"\n//         data-src=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Desktop-NA.mp4\"\n//         data-object-fit={true}\n//         src=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Desktop-NA.mp4\"\n//         data-loaded={true}\n//         autoPlay={true}\n//         style={{\n//           width: \"100%\",\n//           height: \"100%\",\n//           objectFit: \"cover\",\n//         }}\n//       ></video>\n//       <h1\n//         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n//         style={{\n//           whiteSpace: \"nowrap\",\n//           overflow: \"hidden\",\n//           textOverflow: \"ellipsis\",\n//           position: \"absolute\",\n//           top: \"10%\",\n//           left: \"50%\",\n//           transform: \"translate(-50%, -50%)\",\n//           color: \"white\",\n//           fontSize: 24,\n//         }}\n//       >\n//         Add a Charging Station\n//       </h1>\n//       <h1\n//         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n//         style={{\n//           whiteSpace: \"nowrap\",\n//           overflow: \"hidden\",\n//           textOverflow: \"ellipsis\",\n\n//           position: \"absolute\",\n//           top: \"95%\",\n//           left: \"50%\",\n//           transform: \"translate(-50%, -50%)\",\n//           color: \"white\",\n//           fontSize: 20,\n//         }}\n//       >\n//         15 min\n//       </h1>\n//       <h1\n//         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n//         style={{\n//           whiteSpace: \"nowrap\",\n//           overflow: \"hidden\",\n//           textOverflow: \"ellipsis\",\n//           position: \"absolute\",\n//           top: \"98%\",\n//           left: \"50%\",\n//           transform: \"translate(-50%, -50%)\",\n//           color: \"white\",\n//           fontSize: 12,\n//         }}\n//       >\n//         for a 200 mile charge\n//       </h1>\n//       <h1\n//         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n//         style={{\n//           whiteSpace: \"nowrap\",\n//           overflow: \"hidden\",\n//           textOverflow: \"ellipsis\",\n//           position: \"absolute\",\n//           top: \"95%\",\n//           left: \"40%\",\n//           transform: \"translate(-50%, -50%)\",\n//           color: \"white\",\n//           fontSize: 20,\n//         }}\n//       >\n//         1800+\n//       </h1>\n//       <h1\n//         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n//         style={{\n//           whiteSpace: \"nowrap\",\n//           overflow: \"hidden\",\n//           textOverflow: \"ellipsis\",\n//           position: \"absolute\",\n//           top: \"98%\",\n//           left: \"40%\",\n//           transform: \"translate(-50%, -50%)\",\n//           color: \"white\",\n//           fontSize: 12,\n//         }}\n//       >\n//         US Charging Stations\n//       </h1>\n//       <h1\n//         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n//         style={{\n//           whiteSpace: \"nowrap\",\n//           overflow: \"hidden\",\n//           textOverflow: \"ellipsis\",\n//           position: \"absolute\",\n//           top: \"95%\",\n//           left: \"60%\",\n//           transform: \"translate(-50%, -50%)\",\n//           color: \"white\",\n//           fontSize: 20,\n//         }}\n//       >\n//         $\n//       </h1>\n//       <h1\n//         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n//         style={{\n//           whiteSpace: \"nowrap\",\n//           overflow: \"hidden\",\n//           textOverflow: \"ellipsis\",\n//           position: \"absolute\",\n//           top: \"98%\",\n//           left: \"60%\",\n//           transform: \"translate(-50%, -50%)\",\n//           color: \"white\",\n//           fontSize: 12,\n//         }}\n//       >\n//         less than gasoline\n//       </h1>\n\n//       <div\n//         className=\"tcl-form-overlay\"\n//         style={{\n//           position: \"fixed\",\n//           top: \"50%\",\n//           left: \"50%\",\n//           transform: \"translate(-50%, -50%)\",\n//           backgroundColor: \"rgba(255, 255, 255, 0.5)\",\n//           padding: \"20px\",\n//           borderRadius: \"10px\",\n\n//           marginTop: \"1.75%\",\n//         }}\n//       >\n//         <Form onSubmit={handleSubmit}>\n//           <Form.Group controlId=\"stationName\">\n//             <Form.Label>Station Name</Form.Label>\n//             <Form.Control\n//               type=\"text\"\n//               size=\"sm\"\n//               value={stationName}\n//               onChange={(e) => setStationName(e.target.value)}\n//               style={{ width: \"100%\" }}\n//               required={!!stationName.length}\n//               isInvalid={\n//                 stationName.length > 0 &&\n//                 !isNaN(parseFloat(stationName)) &&\n//                 isFinite(stationName)\n//               }\n//             />{\" \"}\n//             <Form.Control.Feedback type=\"invalid\">\n//               Please Enter a Valid Name\n//             </Form.Control.Feedback>\n//           </Form.Group>\n\n//           <Form.Group controlId=\"addressCityStateZip\">\n//             <Form.Label>Address, City, State</Form.Label>\n//             <div>\n//               <div>\n//                 <PlacesAutocomplete\n//                   value={address}\n//                   onChange={handleAddressChange}\n//                   onSelect={handleAddressSelect}\n//                   required\n//                   isInvalid\n//                 >\n//                   {({\n//                     getInputProps,\n//                     suggestions,\n//                     getSuggestionItemProps,\n//                     loading,\n//                   }) => (\n//                     <div>\n//                       <Form.Control\n//                         required={!!suggestions.length}\n//                         isInvalid={\n//                           suggestions.length > 0 &&\n//                           !isNaN(parseFloat(suggestions)) &&\n//                           isFinite(suggestions)\n//                         }\n//                         type=\"text\"\n//                         {...getInputProps({\n//                           placeholder: \"Address\",\n//                           size: \"sm\",\n//                         })}\n//                         style={{ width: \"100%\" }}\n//                       />\n//                       <Form.Control.Feedback type=\"invalid\">\n//                         Please Enter a Valid Address\n//                       </Form.Control.Feedback>\n\n//                       <div>\n//                         {loading && <div>Loading...</div>}\n//                         {suggestions.map((suggestion) => {\n//                           const style = {\n//                             backgroundColor: suggestion.active\n//                               ? \"#e2e2e2\"\n//                               : \"#fff\",\n//                           };\n//                           return (\n//                             <div\n//                               {...getSuggestionItemProps(suggestion, { style })}\n//                               key={suggestion.placeId}\n//                             >\n//                               {suggestion.description}\n//                             </div>\n//                           );\n//                         })}\n//                       </div>\n//                     </div>\n//                   )}\n//                 </PlacesAutocomplete>\n//               </div>\n//               <div style={{ display: \"flex\", marginTop: \"10px\" }}>\n//                 <div style={{ flex: 1, marginRight: \"5px\" }}>\n//                   <Form.Control\n//                     type=\"text\"\n//                     size=\"sm\"\n//                     placeholder=\"City\"\n//                     value={city}\n//                     onChange={(e) => setCity(e.target.value)}\n//                     style={{ width: \"100%\" }}\n//                     required={!!city.length}\n//                     isInvalid={\n//                       city.length > 0 &&\n//                       !isNaN(parseFloat(city)) &&\n//                       isFinite(city)\n//                     }\n//                   />\n//                   <Form.Control.Feedback type=\"invalid\">\n//                     Please Enter a Valid City\n//                   </Form.Control.Feedback>\n//                 </div>\n//                 <div style={{ flex: 1, marginRight: \"5px\" }}>\n//                   <Form.Control\n//                     type=\"number\"\n//                     size=\"sm\"\n//                     placeholder=\"Zip\"\n//                     value={zip}\n//                     onChange={(e) => {\n//                       const input = e.target.value;\n//                       if (/^\\d{0,5}$/.test(input)) {\n//                         setZip(input);\n//                       }\n//                     }}\n//                     style={{ width: \"100%\" }}\n//                     required\n//                     isInvalid={\n//                       zip.length !== 5 &&\n//                       !isNaN(parseFloat(zip)) &&\n//                       isFinite(zip)\n//                     }\n//                   />{\" \"}\n//                   <Form.Control.Feedback type=\"invalid\">\n//                     Please Enter a 5 Digit Zip\n//                   </Form.Control.Feedback>\n//                 </div>\n//                 <div style={{ flex: 1, marginLeft: \"5px\" }}>\n//                   <Form.Control\n//                     as=\"select\"\n//                     size=\"sm\"\n//                     value={state}\n//                     onChange={(e) => setState(e.target.value)}\n//                     style={{ width: \"100%\" }}\n//                     required={!!state.length}\n//                     isInvalid={\n//                       state.length > 0 &&\n//                       !isNaN(parseFloat(state)) &&\n//                       isFinite(state)\n//                     }\n//                   >\n//                     <option value=\"\">State</option>\n//                     {stateAbbreviations.map((state) => (\n//                       <option value={state} key={state}>\n//                         {state}\n//                       </option>\n//                     ))}\n//                   </Form.Control>\n//                   <Form.Control.Feedback type=\"invalid\">\n//                     Please Enter a Valid Price\n//                   </Form.Control.Feedback>\n//                 </div>\n//               </div>\n//             </div>\n//           </Form.Group>\n\n//           <Form.Group controlId=\"pricing\">\n//             <Form.Label>Pricing</Form.Label>\n//             <Form.Control\n//               type=\"text\"\n//               size=\"sm\"\n//               value={pricing}\n//               onChange={(e) => setPricing(e.target.value)}\n//               style={{ width: \"100%\" }}\n//               required={!!pricing.length}\n//               isInvalid={\n//                 pricing.length > 0 &&\n//                 !isNaN(parseFloat(pricing)) &&\n//                 isFinite(pricing)\n//               }\n//             />\n//             <Form.Control.Feedback type=\"invalid\">\n//               Please Enter a Valid Price\n//             </Form.Control.Feedback>\n//           </Form.Group>\n\n//           <Form.Group controlId=\"accessdaytime\">\n//             <Form.Label>Access Hours</Form.Label>\n//             <Form.Control\n//               type=\"text\"\n//               size=\"sm\"\n//               value={accessDaysTime}\n//               onChange={(e) => setAccessDayTime(e.target.value)}\n//               style={{ width: \"100%\" }}\n//               required={!!accessDaysTime.length}\n//               isInvalid={\n//                 accessDaysTime.length > 0 &&\n//                 !isNaN(parseFloat(accessDaysTime)) &&\n//                 isFinite(accessDaysTime)\n//               }\n//             />\n//             <Form.Control.Feedback type=\"invalid\">\n//               Please Enter Valid Hours\n//             </Form.Control.Feedback>\n//           </Form.Group>\n\n//           <Form.Group controlId=\"chargerType\">\n//             <Form.Label>Charger Type</Form.Label>\n//             <Form.Control\n//               type=\"text\"\n//               size=\"sm\"\n//               value={chargerType}\n//               onChange={(e) => setChargerType(e.target.value)}\n//               style={{ width: \"100%\" }}\n//               required={!!chargerType.length}\n//               isInvalid={\n//                 chargerType.length > 0 &&\n//                 !isNaN(parseFloat(chargerType)) &&\n//                 isFinite(chargerType)\n//               }\n//             />\n//             <Form.Control.Feedback type=\"invalid\">\n//               Please Enter a Type\n//             </Form.Control.Feedback>\n//           </Form.Group>\n\n//           <Form.Group controlId=\"review\">\n//             <Form.Label>Review</Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               size=\"sm\"\n//               value={review}\n//               onChange={(e) => setReview([e.target.value])}\n//               style={{ width: \"100%\" }}\n//             />\n//           </Form.Group>\n//           <br></br>\n\n//           <div className=\"d-grid gap-2\">\n//             <Button variant=\"danger\" size=\"lg\" type=\"submit\">\n//               Add New Station\n//             </Button>\n//           </div>\n//         </Form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Newstation;","map":{"version":3,"names":[],"sources":["/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/Newstation.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\n// import Form from \"react-bootstrap/Form\";\n// import Button from \"react-bootstrap/Button\";\n// import InputGroup from \"react-bootstrap/InputGroup\";\n// import PlacesAutocomplete, {\n//   geocodeByAddress,\n//   getLatLng,\n// } from \"react-places-autocomplete\";\n\n// const stateAbbreviations = [\n//   \"AL\",\n//   \"AK\",\n//   \"AZ\",\n//   \"AR\",\n//   \"CA\",\n//   \"CO\",\n//   \"CT\",\n//   \"DE\",\n//   \"FL\",\n//   \"GA\",\n//   \"HI\",\n//   \"ID\",\n//   \"IL\",\n//   \"IN\",\n//   \"IA\",\n//   \"KS\",\n//   \"KY\",\n//   \"LA\",\n//   \"ME\",\n//   \"MD\",\n//   \"MA\",\n//   \"MI\",\n//   \"MN\",\n//   \"MS\",\n//   \"MO\",\n//   \"MT\",\n//   \"NE\",\n//   \"NV\",\n//   \"NH\",\n//   \"NJ\",\n//   \"NM\",\n//   \"NY\",\n//   \"NC\",\n//   \"ND\",\n//   \"OH\",\n//   \"OK\",\n//   \"OR\",\n//   \"PA\",\n//   \"RI\",\n//   \"SC\",\n//   \"SD\",\n//   \"TN\",\n//   \"TX\",\n//   \"UT\",\n//   \"VT\",\n//   \"VA\",\n//   \"WA\",\n//   \"WV\",\n//   \"WI\",\n//   \"WY\",\n// ];\n\n// function Newstation() {\n//   const [stationName, setStationName] = useState(\"\");\n//   const [address, setAddress] = useState(\"\");\n//   const [city, setCity] = useState(\"\");\n//   const [state, setState] = useState(\"\");\n//   const [pricing, setPricing] = useState(\"\");\n//   const [review, setReview] = useState([]);\n//   const [chargerType, setChargerType] = useState(\"\");\n//   const [lat, setLat] = useState(0);\n//   const [lng, setLng] = useState(0);\n//   const [accessDaysTime, setAccessDayTime] = useState(\"\");\n//   const [zip, setZip] = useState(\"\");\n\n//   function handleAddressChange(selectedAddress) {\n//     setAddress(selectedAddress);\n//   }\n\n//   const handleAddressSelect = async (selectedAddress) => {\n//     setAddress(selectedAddress);\n\n//     try {\n//       const results = await geocodeByAddress(selectedAddress);\n//       const selectedLocation = await getLatLng(results[0]);\n//       const { lat, lng } = selectedLocation;\n//       console.log(`Latitude: ${lat}, Longitude: ${lng}`);\n//       //console.log (selectedAddress)\n//       setLat(lat);\n//       setLng(lng);\n//       const addressArr = selectedAddress.split(\", \");\n//       // console.log (addressArr[addressArr.length-2])\n//       // console.log (addressArr[addressArr.length-3])\n//       setCity(addressArr[addressArr.length - 3]);\n//       setState(addressArr[addressArr.length - 2]);\n//     } catch (error) {\n//       console.log(\"Error:\", error);\n//     }\n//   };\n\n//   function handleSubmit(event) {\n//     event.preventDefault();\n\n//     const newStation = {\n//       access_days_time: accessDaysTime,\n//       station_name: stationName,\n//       station_phone: \"877-798-3752\",\n//       latitude: lat,\n//       longitude: lng,\n//       city: city,\n//       state: state,\n//       street_address: address.split(\",\")[0],\n//       country: \"US\",\n//       zip: zip,\n//       comments: review,\n//       ev_pricing: pricing,\n//     };\n//     if (\n//       city !== \"\" &&\n//       state !== \"\" &&\n//       address !== \"\" &&\n//       pricing !== \"\" &&\n//       stationName !== \"\"\n//     ) {\n//       fetch(\"http://localhost:3000/fuel_stations\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-type\": \"application/json\",\n//           Accept: \"application/json\",\n//         },\n//         body: JSON.stringify(newStation),\n//       })\n//         .then((response) => response.json())\n//         .then((data) => {\n//           console.log(newStation);\n//           setStationName(\"\");\n//           setAddress(\"\");\n//           setCity(\"\");\n//           setState(\"\");\n//           setPricing(\"\");\n//           setReview(\"\");\n//           setChargerType(\"\");\n//           setAccessDayTime(\"\");\n//           setZip(\"\");\n//         });\n//     } else {\n//       alert(\"Please complete the form\");\n//     }\n//   }\n\n//   return (\n//     <div\n//       className=\"tcl-video-container\"\n//       style={{\n//         position: \"fixed\",\n//         top: 0,\n//         left: 0,\n//         width: \"100vw\",\n//         height: \"100vh\",\n//         zIndex: -1,\n//         overflow: \"hidden\",\n//       }}\n//     >\n//       <video\n//         className=\"tcl-asset tcl-video__asset lozad tcl-objectfit-position tcl-objectfit-position--center visible-no-fade-in\"\n//         preload=\"auto\"\n//         playsInline\n//         data-autoplay-desktop={true}\n//         data-autoplay-portrait={true}\n//         data-autoplay-mobile={true}\n//         data-play-on-hover={false}\n//         muted\n//         loop\n//         controls={false}\n//         data-src-desktop=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Desktop-NA.mp4\"\n//         data-src-portrait=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Desktop-NA.mp4\"\n//         data-src-mobile=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Mobile-NA.mp4\"\n//         data-src=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Desktop-NA.mp4\"\n//         data-object-fit={true}\n//         src=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Desktop-NA.mp4\"\n//         data-loaded={true}\n//         autoPlay={true}\n//         style={{\n//           width: \"100%\",\n//           height: \"100%\",\n//           objectFit: \"cover\",\n//         }}\n//       ></video>\n//       <h1\n//         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n//         style={{\n//           whiteSpace: \"nowrap\",\n//           overflow: \"hidden\",\n//           textOverflow: \"ellipsis\",\n//           position: \"absolute\",\n//           top: \"10%\",\n//           left: \"50%\",\n//           transform: \"translate(-50%, -50%)\",\n//           color: \"white\",\n//           fontSize: 24,\n//         }}\n//       >\n//         Add a Charging Station\n//       </h1>\n//       <h1\n//         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n//         style={{\n//           whiteSpace: \"nowrap\",\n//           overflow: \"hidden\",\n//           textOverflow: \"ellipsis\",\n\n//           position: \"absolute\",\n//           top: \"95%\",\n//           left: \"50%\",\n//           transform: \"translate(-50%, -50%)\",\n//           color: \"white\",\n//           fontSize: 20,\n//         }}\n//       >\n//         15 min\n//       </h1>\n//       <h1\n//         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n//         style={{\n//           whiteSpace: \"nowrap\",\n//           overflow: \"hidden\",\n//           textOverflow: \"ellipsis\",\n//           position: \"absolute\",\n//           top: \"98%\",\n//           left: \"50%\",\n//           transform: \"translate(-50%, -50%)\",\n//           color: \"white\",\n//           fontSize: 12,\n//         }}\n//       >\n//         for a 200 mile charge\n//       </h1>\n//       <h1\n//         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n//         style={{\n//           whiteSpace: \"nowrap\",\n//           overflow: \"hidden\",\n//           textOverflow: \"ellipsis\",\n//           position: \"absolute\",\n//           top: \"95%\",\n//           left: \"40%\",\n//           transform: \"translate(-50%, -50%)\",\n//           color: \"white\",\n//           fontSize: 20,\n//         }}\n//       >\n//         1800+\n//       </h1>\n//       <h1\n//         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n//         style={{\n//           whiteSpace: \"nowrap\",\n//           overflow: \"hidden\",\n//           textOverflow: \"ellipsis\",\n//           position: \"absolute\",\n//           top: \"98%\",\n//           left: \"40%\",\n//           transform: \"translate(-50%, -50%)\",\n//           color: \"white\",\n//           fontSize: 12,\n//         }}\n//       >\n//         US Charging Stations\n//       </h1>\n//       <h1\n//         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n//         style={{\n//           whiteSpace: \"nowrap\",\n//           overflow: \"hidden\",\n//           textOverflow: \"ellipsis\",\n//           position: \"absolute\",\n//           top: \"95%\",\n//           left: \"60%\",\n//           transform: \"translate(-50%, -50%)\",\n//           color: \"white\",\n//           fontSize: 20,\n//         }}\n//       >\n//         $\n//       </h1>\n//       <h1\n//         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n//         style={{\n//           whiteSpace: \"nowrap\",\n//           overflow: \"hidden\",\n//           textOverflow: \"ellipsis\",\n//           position: \"absolute\",\n//           top: \"98%\",\n//           left: \"60%\",\n//           transform: \"translate(-50%, -50%)\",\n//           color: \"white\",\n//           fontSize: 12,\n//         }}\n//       >\n//         less than gasoline\n//       </h1>\n\n//       <div\n//         className=\"tcl-form-overlay\"\n//         style={{\n//           position: \"fixed\",\n//           top: \"50%\",\n//           left: \"50%\",\n//           transform: \"translate(-50%, -50%)\",\n//           backgroundColor: \"rgba(255, 255, 255, 0.5)\",\n//           padding: \"20px\",\n//           borderRadius: \"10px\",\n\n//           marginTop: \"1.75%\",\n//         }}\n//       >\n//         <Form onSubmit={handleSubmit}>\n//           <Form.Group controlId=\"stationName\">\n//             <Form.Label>Station Name</Form.Label>\n//             <Form.Control\n//               type=\"text\"\n//               size=\"sm\"\n//               value={stationName}\n//               onChange={(e) => setStationName(e.target.value)}\n//               style={{ width: \"100%\" }}\n//               required={!!stationName.length}\n//               isInvalid={\n//                 stationName.length > 0 &&\n//                 !isNaN(parseFloat(stationName)) &&\n//                 isFinite(stationName)\n//               }\n//             />{\" \"}\n//             <Form.Control.Feedback type=\"invalid\">\n//               Please Enter a Valid Name\n//             </Form.Control.Feedback>\n//           </Form.Group>\n\n//           <Form.Group controlId=\"addressCityStateZip\">\n//             <Form.Label>Address, City, State</Form.Label>\n//             <div>\n//               <div>\n//                 <PlacesAutocomplete\n//                   value={address}\n//                   onChange={handleAddressChange}\n//                   onSelect={handleAddressSelect}\n//                   required\n//                   isInvalid\n//                 >\n//                   {({\n//                     getInputProps,\n//                     suggestions,\n//                     getSuggestionItemProps,\n//                     loading,\n//                   }) => (\n//                     <div>\n//                       <Form.Control\n//                         required={!!suggestions.length}\n//                         isInvalid={\n//                           suggestions.length > 0 &&\n//                           !isNaN(parseFloat(suggestions)) &&\n//                           isFinite(suggestions)\n//                         }\n//                         type=\"text\"\n//                         {...getInputProps({\n//                           placeholder: \"Address\",\n//                           size: \"sm\",\n//                         })}\n//                         style={{ width: \"100%\" }}\n//                       />\n//                       <Form.Control.Feedback type=\"invalid\">\n//                         Please Enter a Valid Address\n//                       </Form.Control.Feedback>\n\n//                       <div>\n//                         {loading && <div>Loading...</div>}\n//                         {suggestions.map((suggestion) => {\n//                           const style = {\n//                             backgroundColor: suggestion.active\n//                               ? \"#e2e2e2\"\n//                               : \"#fff\",\n//                           };\n//                           return (\n//                             <div\n//                               {...getSuggestionItemProps(suggestion, { style })}\n//                               key={suggestion.placeId}\n//                             >\n//                               {suggestion.description}\n//                             </div>\n//                           );\n//                         })}\n//                       </div>\n//                     </div>\n//                   )}\n//                 </PlacesAutocomplete>\n//               </div>\n//               <div style={{ display: \"flex\", marginTop: \"10px\" }}>\n//                 <div style={{ flex: 1, marginRight: \"5px\" }}>\n//                   <Form.Control\n//                     type=\"text\"\n//                     size=\"sm\"\n//                     placeholder=\"City\"\n//                     value={city}\n//                     onChange={(e) => setCity(e.target.value)}\n//                     style={{ width: \"100%\" }}\n//                     required={!!city.length}\n//                     isInvalid={\n//                       city.length > 0 &&\n//                       !isNaN(parseFloat(city)) &&\n//                       isFinite(city)\n//                     }\n//                   />\n//                   <Form.Control.Feedback type=\"invalid\">\n//                     Please Enter a Valid City\n//                   </Form.Control.Feedback>\n//                 </div>\n//                 <div style={{ flex: 1, marginRight: \"5px\" }}>\n//                   <Form.Control\n//                     type=\"number\"\n//                     size=\"sm\"\n//                     placeholder=\"Zip\"\n//                     value={zip}\n//                     onChange={(e) => {\n//                       const input = e.target.value;\n//                       if (/^\\d{0,5}$/.test(input)) {\n//                         setZip(input);\n//                       }\n//                     }}\n//                     style={{ width: \"100%\" }}\n//                     required\n//                     isInvalid={\n//                       zip.length !== 5 &&\n//                       !isNaN(parseFloat(zip)) &&\n//                       isFinite(zip)\n//                     }\n//                   />{\" \"}\n//                   <Form.Control.Feedback type=\"invalid\">\n//                     Please Enter a 5 Digit Zip\n//                   </Form.Control.Feedback>\n//                 </div>\n//                 <div style={{ flex: 1, marginLeft: \"5px\" }}>\n//                   <Form.Control\n//                     as=\"select\"\n//                     size=\"sm\"\n//                     value={state}\n//                     onChange={(e) => setState(e.target.value)}\n//                     style={{ width: \"100%\" }}\n//                     required={!!state.length}\n//                     isInvalid={\n//                       state.length > 0 &&\n//                       !isNaN(parseFloat(state)) &&\n//                       isFinite(state)\n//                     }\n//                   >\n//                     <option value=\"\">State</option>\n//                     {stateAbbreviations.map((state) => (\n//                       <option value={state} key={state}>\n//                         {state}\n//                       </option>\n//                     ))}\n//                   </Form.Control>\n//                   <Form.Control.Feedback type=\"invalid\">\n//                     Please Enter a Valid Price\n//                   </Form.Control.Feedback>\n//                 </div>\n//               </div>\n//             </div>\n//           </Form.Group>\n\n//           <Form.Group controlId=\"pricing\">\n//             <Form.Label>Pricing</Form.Label>\n//             <Form.Control\n//               type=\"text\"\n//               size=\"sm\"\n//               value={pricing}\n//               onChange={(e) => setPricing(e.target.value)}\n//               style={{ width: \"100%\" }}\n//               required={!!pricing.length}\n//               isInvalid={\n//                 pricing.length > 0 &&\n//                 !isNaN(parseFloat(pricing)) &&\n//                 isFinite(pricing)\n//               }\n//             />\n//             <Form.Control.Feedback type=\"invalid\">\n//               Please Enter a Valid Price\n//             </Form.Control.Feedback>\n//           </Form.Group>\n\n//           <Form.Group controlId=\"accessdaytime\">\n//             <Form.Label>Access Hours</Form.Label>\n//             <Form.Control\n//               type=\"text\"\n//               size=\"sm\"\n//               value={accessDaysTime}\n//               onChange={(e) => setAccessDayTime(e.target.value)}\n//               style={{ width: \"100%\" }}\n//               required={!!accessDaysTime.length}\n//               isInvalid={\n//                 accessDaysTime.length > 0 &&\n//                 !isNaN(parseFloat(accessDaysTime)) &&\n//                 isFinite(accessDaysTime)\n//               }\n//             />\n//             <Form.Control.Feedback type=\"invalid\">\n//               Please Enter Valid Hours\n//             </Form.Control.Feedback>\n//           </Form.Group>\n\n//           <Form.Group controlId=\"chargerType\">\n//             <Form.Label>Charger Type</Form.Label>\n//             <Form.Control\n//               type=\"text\"\n//               size=\"sm\"\n//               value={chargerType}\n//               onChange={(e) => setChargerType(e.target.value)}\n//               style={{ width: \"100%\" }}\n//               required={!!chargerType.length}\n//               isInvalid={\n//                 chargerType.length > 0 &&\n//                 !isNaN(parseFloat(chargerType)) &&\n//                 isFinite(chargerType)\n//               }\n//             />\n//             <Form.Control.Feedback type=\"invalid\">\n//               Please Enter a Type\n//             </Form.Control.Feedback>\n//           </Form.Group>\n\n//           <Form.Group controlId=\"review\">\n//             <Form.Label>Review</Form.Label>\n//             <Form.Control\n//               as=\"textarea\"\n//               rows={3}\n//               size=\"sm\"\n//               value={review}\n//               onChange={(e) => setReview([e.target.value])}\n//               style={{ width: \"100%\" }}\n//             />\n//           </Form.Group>\n//           <br></br>\n\n//           <div className=\"d-grid gap-2\">\n//             <Button variant=\"danger\" size=\"lg\" type=\"submit\">\n//               Add New Station\n//             </Button>\n//           </div>\n//         </Form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Newstation;\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}