{"ast":null,"code":"var _jsxFileName = \"/Users/tabo/Development/code/phase-2/phase-2-Project/Find-a-Supercharger-Frontend/src/components/Carddisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardDisplay = () => {\n  _s();\n  // Your location coordinates\n  const yourLatitude = 40.7052019;\n  const yourLongitude = -74.0140841;\n\n  // Fuel stations data (assuming it's stored in an array called 'fuelStations')\n  const [fuelStations, setFuelStations] = useState([{\n    station_name: \"Colonie Center - Tesla Supercharger\",\n    latitude: 42.710356,\n    longitude: -73.819109\n  }, {\n    station_name: \"The Spot Restaurant - Tesla Supercharger\",\n    latitude: 42.145542,\n    longitude: -75.902081\n  }\n  // Add other fuel stations here\n  ]);\n\n  useEffect(() => {\n    // Calculate distances for each fuel station\n    const updatedFuelStations = fuelStations.map(station => {\n      const stationLatitude = station.latitude;\n      const stationLongitude = station.longitude;\n\n      // Calculate the distance between your location and the fuel station using the Haversine formula\n      const distance = calculateDistance(yourLatitude, yourLongitude, stationLatitude, stationLongitude);\n\n      // Add the distance to the fuel station data\n      return {\n        ...station,\n        distance: distance\n      };\n    });\n\n    // Sort the fuel stations based on distance\n    updatedFuelStations.sort((a, b) => a.distance - b.distance);\n\n    // Update the state with the sorted fuel stations\n    setFuelStations(updatedFuelStations);\n  }, []);\n\n  // Function to calculate the distance between two coordinates using the Haversine formula\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 3959; // Radius of the Earth in miles\n    const dLat = deg2rad(lat2 - lat1);\n    const dLon = deg2rad(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c; // Distance in miles\n    return distance;\n  };\n\n  // Function to convert degrees to radians\n  const deg2rad = deg => {\n    return deg * (Math.PI / 180);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: fuelStations.map(station => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Station: \", station.station_name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Distance: \", station.distance.toFixed(2), \" miles\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, station.station_name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(CardDisplay, \"YfLwkNh5aFjsix/MwqPOq7S4BH8=\");\n_c = CardDisplay;\nexport default CardDisplay;\nvar _c;\n$RefreshReg$(_c, \"CardDisplay\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","CardDisplay","_s","yourLatitude","yourLongitude","fuelStations","setFuelStations","station_name","latitude","longitude","updatedFuelStations","map","station","stationLatitude","stationLongitude","distance","calculateDistance","sort","a","b","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","Math","sin","cos","c","atan2","sqrt","deg","PI","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","_c","$RefreshReg$"],"sources":["/Users/tabo/Development/code/phase-2/phase-2-Project/Find-a-Supercharger-Frontend/src/components/Carddisplay.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst CardDisplay = () => {\n  // Your location coordinates\n  const yourLatitude = 40.7052019;\n  const yourLongitude = -74.0140841;\n\n  // Fuel stations data (assuming it's stored in an array called 'fuelStations')\n  const [fuelStations, setFuelStations] = useState([\n    {\n      station_name: \"Colonie Center - Tesla Supercharger\",\n      latitude: 42.710356,\n      longitude: -73.819109\n    },\n    {\n      station_name: \"The Spot Restaurant - Tesla Supercharger\",\n      latitude: 42.145542,\n      longitude: -75.902081\n    },\n    // Add other fuel stations here\n  ]);\n\n  useEffect(() => {\n    // Calculate distances for each fuel station\n    const updatedFuelStations = fuelStations.map(station => {\n      const stationLatitude = station.latitude;\n      const stationLongitude = station.longitude;\n\n      // Calculate the distance between your location and the fuel station using the Haversine formula\n      const distance = calculateDistance(\n        yourLatitude,\n        yourLongitude,\n        stationLatitude,\n        stationLongitude\n      );\n\n      // Add the distance to the fuel station data\n      return {\n        ...station,\n        distance: distance\n      };\n    });\n\n    // Sort the fuel stations based on distance\n    updatedFuelStations.sort((a, b) => a.distance - b.distance);\n\n    // Update the state with the sorted fuel stations\n    setFuelStations(updatedFuelStations);\n  }, []);\n\n  // Function to calculate the distance between two coordinates using the Haversine formula\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 3959; // Radius of the Earth in miles\n    const dLat = deg2rad(lat2 - lat1);\n    const dLon = deg2rad(lon2 - lon1);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c; // Distance in miles\n    return distance;\n  };\n\n  // Function to convert degrees to radians\n  const deg2rad = deg => {\n    return deg * (Math.PI / 180);\n  };\n\n  return (\n    <div>\n      {fuelStations.map(station => (\n        <div key={station.station_name}>\n          <p>Station: {station.station_name}</p>\n          <p>Distance: {station.distance.toFixed(2)} miles</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CardDisplay;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}