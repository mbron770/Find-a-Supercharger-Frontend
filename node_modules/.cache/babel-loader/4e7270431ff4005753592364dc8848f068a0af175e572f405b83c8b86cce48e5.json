{"ast":null,"code":"var _jsxFileName = \"/Users/tabo/Development/code/phase-2/phase-2-Project/Find-a-Supercharger-Frontend/src/components/Carddisplay.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst URL = 'http://localhost:3000/fuel_stations';\nexport default function Carddisplay() {\n  _s();\n  const [stations, setStations] = useState([]);\n  useEffect(() => {\n    fetch(URL).then(response => response.json()).then(data => setStations(data));\n  }, []);\n  const axios = require('axios');\n\n  // Your location coordinates\n  const yourLatitude = 40.7128;\n  const yourLongitude = -74.0060;\n\n  // Fuel stations data (assuming it's stored in an array called 'fuelStations')\n  const fuelStations = [{\n    station_name: \"Colonie Center - Tesla Supercharger\",\n    latitude: 42.710356,\n    longitude: -73.819109\n  }, {\n    station_name: \"The Spot Restaurant - Tesla Supercharger\",\n    latitude: 42.145542,\n    longitude: -75.902081\n  }\n  // Add other fuel stations here\n  ];\n\n  // Google Maps Distance Matrix API endpoint\n  const apiEndpoint = \"https://maps.googleapis.com/maps/api/distancematrix/json\";\n\n  // Calculate distances for each fuel station\n  fuelStations.forEach(station => {\n    // Get the station's latitude and longitude\n    const stationLatitude = station.latitude;\n    const stationLongitude = station.longitude;\n\n    // Make a request to the Google Maps Distance Matrix API\n    const params = {\n      origins: `${yourLatitude},${yourLongitude}`,\n      destinations: `${stationLatitude},${stationLongitude}`,\n      key: \"YOUR_GOOGLE_MAPS_API_KEY\"\n    };\n    axios.get(apiEndpoint, {\n      params\n    }).then(response => {\n      // Parse the response and extract the distance\n      const distance = response.data.rows[0].elements[0].distance.value;\n\n      // Add the distance to the fuel station data\n      station.distance = distance;\n    }).catch(error => {\n      console.log(\"Error:\", error);\n    });\n  });\n\n  // Wait for all distance calculations to finish\n  Promise.all(fuelStations.map(station => station.distance)).then(() => {\n    // Sort the fuel stations based on distance\n    fuelStations.sort((a, b) => a.distance - b.distance);\n\n    // Print the fuel stations sorted by distance\n    fuelStations.forEach(station => {\n      console.log(`Station: ${station.station_name}`);\n      console.log(`Distance: ${station.distance} meters`);\n      console.log();\n    });\n  });\n  console.log(stations);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"card display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Carddisplay, \"KV8CcP3gcIUxQ2C9moSCRW/KKrI=\");\n_c = Carddisplay;\nvar _c;\n$RefreshReg$(_c, \"Carddisplay\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","URL","Carddisplay","_s","stations","setStations","fetch","then","response","json","data","axios","require","yourLatitude","yourLongitude","fuelStations","station_name","latitude","longitude","apiEndpoint","forEach","station","stationLatitude","stationLongitude","params","origins","destinations","key","get","distance","rows","elements","value","catch","error","console","log","Promise","all","map","sort","a","b","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tabo/Development/code/phase-2/phase-2-Project/Find-a-Supercharger-Frontend/src/components/Carddisplay.jsx"],"sourcesContent":["import React from \"react\";\nimport { useState,useEffect } from \"react\";\n\nconst URL = 'http://localhost:3000/fuel_stations';\n\nexport default function Carddisplay() {\n\n  const [stations, setStations] = useState([]);\n\n  useEffect(() => {\n    fetch(URL)\n      .then(response => response.json())\n      .then(data => setStations(data));\n  }, []);\n\n  const axios = require('axios');\n\n  // Your location coordinates\n  const yourLatitude = 40.7128;\n  const yourLongitude = -74.0060;\n\n  // Fuel stations data (assuming it's stored in an array called 'fuelStations')\n  const fuelStations = [\n    {\n      station_name: \"Colonie Center - Tesla Supercharger\",\n      latitude: 42.710356,\n      longitude: -73.819109\n    },\n    {\n      station_name: \"The Spot Restaurant - Tesla Supercharger\",\n      latitude: 42.145542,\n      longitude: -75.902081\n    },\n    // Add other fuel stations here\n  ];\n\n  // Google Maps Distance Matrix API endpoint\n  const apiEndpoint = \"https://maps.googleapis.com/maps/api/distancematrix/json\";\n\n  // Calculate distances for each fuel station\n  fuelStations.forEach(station => {\n    // Get the station's latitude and longitude\n    const stationLatitude = station.latitude;\n    const stationLongitude = station.longitude;\n\n    // Make a request to the Google Maps Distance Matrix API\n    const params = {\n      origins: `${yourLatitude},${yourLongitude}`,\n      destinations: `${stationLatitude},${stationLongitude}`,\n      key: \"YOUR_GOOGLE_MAPS_API_KEY\"\n    };\n\n    axios.get(apiEndpoint, { params })\n      .then(response => {\n        // Parse the response and extract the distance\n        const distance = response.data.rows[0].elements[0].distance.value;\n\n        // Add the distance to the fuel station data\n        station.distance = distance;\n      })\n      .catch(error => {\n        console.log(\"Error:\", error);\n      });\n  });\n\n  // Wait for all distance calculations to finish\n  Promise.all(fuelStations.map(station => station.distance))\n    .then(() => {\n      // Sort the fuel stations based on distance\n      fuelStations.sort((a, b) => a.distance - b.distance);\n\n      // Print the fuel stations sorted by distance\n      fuelStations.forEach(station => {\n        console.log(`Station: ${station.station_name}`);\n        console.log(`Distance: ${station.distance} meters`);\n        console.log();\n      });\n    });\n\n\n  console.log (stations)\n  \n  return (\n    <>   \n      <h1>card display</h1>\n    </>\n  );\n} "],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAACC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE3C,MAAMC,GAAG,GAAG,qCAAqC;AAEjD,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EAEpC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACdU,KAAK,CAACL,GAAG,CAAC,CACPM,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIL,WAAW,CAACK,IAAI,CAAC,CAAC;EACpC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;;EAE9B;EACA,MAAMC,YAAY,GAAG,OAAO;EAC5B,MAAMC,aAAa,GAAG,CAAC,OAAO;;EAE9B;EACA,MAAMC,YAAY,GAAG,CACnB;IACEC,YAAY,EAAE,qCAAqC;IACnDC,QAAQ,EAAE,SAAS;IACnBC,SAAS,EAAE,CAAC;EACd,CAAC,EACD;IACEF,YAAY,EAAE,0CAA0C;IACxDC,QAAQ,EAAE,SAAS;IACnBC,SAAS,EAAE,CAAC;EACd;EACA;EAAA,CACD;;EAED;EACA,MAAMC,WAAW,GAAG,0DAA0D;;EAE9E;EACAJ,YAAY,CAACK,OAAO,CAACC,OAAO,IAAI;IAC9B;IACA,MAAMC,eAAe,GAAGD,OAAO,CAACJ,QAAQ;IACxC,MAAMM,gBAAgB,GAAGF,OAAO,CAACH,SAAS;;IAE1C;IACA,MAAMM,MAAM,GAAG;MACbC,OAAO,EAAG,GAAEZ,YAAa,IAAGC,aAAc,EAAC;MAC3CY,YAAY,EAAG,GAAEJ,eAAgB,IAAGC,gBAAiB,EAAC;MACtDI,GAAG,EAAE;IACP,CAAC;IAEDhB,KAAK,CAACiB,GAAG,CAACT,WAAW,EAAE;MAAEK;IAAO,CAAC,CAAC,CAC/BjB,IAAI,CAACC,QAAQ,IAAI;MAChB;MACA,MAAMqB,QAAQ,GAAGrB,QAAQ,CAACE,IAAI,CAACoB,IAAI,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACF,QAAQ,CAACG,KAAK;;MAEjE;MACAX,OAAO,CAACQ,QAAQ,GAAGA,QAAQ;IAC7B,CAAC,CAAC,CACDI,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,KAAK,CAAC;IAC9B,CAAC,CAAC;EACN,CAAC,CAAC;;EAEF;EACAG,OAAO,CAACC,GAAG,CAACvB,YAAY,CAACwB,GAAG,CAAClB,OAAO,IAAIA,OAAO,CAACQ,QAAQ,CAAC,CAAC,CACvDtB,IAAI,CAAC,MAAM;IACV;IACAQ,YAAY,CAACyB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACZ,QAAQ,GAAGa,CAAC,CAACb,QAAQ,CAAC;;IAEpD;IACAd,YAAY,CAACK,OAAO,CAACC,OAAO,IAAI;MAC9Bc,OAAO,CAACC,GAAG,CAAE,YAAWf,OAAO,CAACL,YAAa,EAAC,CAAC;MAC/CmB,OAAO,CAACC,GAAG,CAAE,aAAYf,OAAO,CAACQ,QAAS,SAAQ,CAAC;MACnDM,OAAO,CAACC,GAAG,CAAC,CAAC;IACf,CAAC,CAAC;EACJ,CAAC,CAAC;EAGJD,OAAO,CAACC,GAAG,CAAEhC,QAAQ,CAAC;EAEtB,oBACEN,OAAA,CAAAE,SAAA;IAAA2C,QAAA,eACE7C,OAAA;MAAA6C,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC,gBACrB,CAAC;AAEP;AAAC5C,EAAA,CAlFuBD,WAAW;AAAA8C,EAAA,GAAX9C,WAAW;AAAA,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}