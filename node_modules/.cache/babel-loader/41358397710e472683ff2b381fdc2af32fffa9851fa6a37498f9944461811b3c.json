{"ast":null,"code":"var _jsxFileName = \"/Users/tabo/Development/code/phase-2/phase-2-Project/Find-a-Supercharger-Frontend/src/components/Carddisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL = 'http://localhost:3000/fuel_stations';\nconst CardDisplay = () => {\n  _s();\n  const [stations, setStations] = useState([]);\n  const [currentLocation, setCurrentLocation] = useState(null);\n  const [isLocationLoaded, setLocationLoaded] = useState(false);\n  useEffect(() => {\n    fetch(URL).then(response => response.json()).then(data => setStations(data));\n  }, []);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCurrentLocation({\n          lat: latitude,\n          lng: longitude\n        });\n        setLocationLoaded(true);\n      }, error => {\n        console.error(\"Error getting current location:\", error);\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n  useEffect(() => {\n    if (isLocationLoaded && currentLocation) {\n      calculateDistances();\n    }\n  }, [isLocationLoaded, currentLocation]);\n  const calculateDistances = () => {\n    const yourLatitude = currentLocation.lat;\n    const yourLongitude = currentLocation.lng;\n    const updatedStations = stations.map(station => {\n      const stationLatitude = station.latitude;\n      const stationLongitude = station.longitude;\n      const distance = calculateDistance(yourLatitude, yourLongitude, stationLatitude, stationLongitude);\n      return {\n        ...station,\n        distance: distance\n      };\n    });\n    updatedStations.sort((a, b) => a.distance - b.distance);\n    setStations(updatedStations);\n  };\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 3959; // Radius of the Earth in miles\n    const dLat = deg2rad(lat2 - lat1);\n    const dLon = deg2rad(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c; // Distance in miles\n    return distance;\n  };\n  const deg2rad = deg => {\n    return deg * (Math.PI / 180);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: stations.map(station => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Station: \", station.station_name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), station.distance && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Distance: \", station.distance.toFixed(2), \" miles\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 32\n      }, this)]\n    }, uuidv4(), true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(CardDisplay, \"EEMd86lFFhAnjT66P9c25lAdarQ=\");\n_c = CardDisplay;\nexport default CardDisplay;\nvar _c;\n$RefreshReg$(_c, \"CardDisplay\");","map":{"version":3,"names":["React","useEffect","useState","v4","uuidv4","jsxDEV","_jsxDEV","URL","CardDisplay","_s","stations","setStations","currentLocation","setCurrentLocation","isLocationLoaded","setLocationLoaded","fetch","then","response","json","data","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","lat","lng","error","console","calculateDistances","yourLatitude","yourLongitude","updatedStations","map","station","stationLatitude","stationLongitude","distance","calculateDistance","sort","a","b","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","Math","sin","cos","c","atan2","sqrt","deg","PI","children","station_name","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","_c","$RefreshReg$"],"sources":["/Users/tabo/Development/code/phase-2/phase-2-Project/Find-a-Supercharger-Frontend/src/components/Carddisplay.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst URL = 'http://localhost:3000/fuel_stations';\n\nconst CardDisplay = () => {\n  const [stations, setStations] = useState([]);\n  const [currentLocation, setCurrentLocation] = useState(null);\n  const [isLocationLoaded, setLocationLoaded] = useState(false);\n\n  useEffect(() => {\n    fetch(URL)\n      .then(response => response.json())\n      .then(data => setStations(data));\n  }, []);\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setCurrentLocation({ lat: latitude, lng: longitude });\n          setLocationLoaded(true);\n        },\n        (error) => {\n          console.error(\"Error getting current location:\", error);\n        }\n      );\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isLocationLoaded && currentLocation) {\n      calculateDistances();\n    }\n  }, [isLocationLoaded, currentLocation]);\n\n  const calculateDistances = () => {\n    const yourLatitude = currentLocation.lat;\n    const yourLongitude = currentLocation.lng;\n\n    const updatedStations = stations.map(station => {\n      const stationLatitude = station.latitude;\n      const stationLongitude = station.longitude;\n\n      const distance = calculateDistance(\n        yourLatitude,\n        yourLongitude,\n        stationLatitude,\n        stationLongitude\n      );\n\n      return {\n        ...station,\n        distance: distance\n      };\n    });\n\n    updatedStations.sort((a, b) => a.distance - b.distance);\n    setStations(updatedStations);\n  };\n\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 3959; // Radius of the Earth in miles\n    const dLat = deg2rad(lat2 - lat1);\n    const dLon = deg2rad(lon2 - lon1);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c; // Distance in miles\n    return distance;\n  };\n\n  const deg2rad = deg => {\n    return deg * (Math.PI / 180);\n  };\n\n  return (\n    <div>\n      {stations.map(station => (\n        <div key={uuidv4()}>\n          <p>Station: {station.station_name}</p>\n          {station.distance && <p>Distance: {station.distance.toFixed(2)} miles</p>}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CardDisplay;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}