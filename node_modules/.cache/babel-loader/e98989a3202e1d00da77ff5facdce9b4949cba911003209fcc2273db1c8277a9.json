{"ast":null,"code":"var _jsxFileName = \"/Users/tabo/Development/code/phase-2/phase-2-Project/Find-a-Supercharger-Frontend/src/components/Carddisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst URL = 'http://localhost:3000/fuel_stations';\nexport default function CardDisplay() {\n  _s();\n  const [stations, setStations] = useState([]);\n  const [currentLocation, setCurrentLocation] = useState(null);\n  useEffect(() => {\n    fetch(URL).then(response => response.json()).then(data => setStations(data));\n  }, []);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCurrentLocation({\n          lat: latitude,\n          lng: longitude\n        });\n      }, error => {\n        console.error(\"Error getting current location:\", error);\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n  useEffect(() => {\n    if (currentLocation) {\n      const yourLatitude = currentLocation.lat;\n      const yourLongitude = currentLocation.lng;\n      const fuelStations = [{\n        station_name: \"Colonie Center - Tesla Supercharger\",\n        latitude: 42.710356,\n        longitude: -73.819109\n      }, {\n        station_name: \"The Spot Restaurant - Tesla Supercharger\",\n        latitude: 42.145542,\n        longitude: -75.902081\n      }\n      // Add other fuel stations here\n      ];\n\n      const apiEndpoint = \"https://maps.googleapis.com/maps/api/distancematrix/json\";\n      const calculateDistances = async () => {\n        const updatedStations = [];\n        for (const station of fuelStations) {\n          const stationLatitude = station.latitude;\n          const stationLongitude = station.longitude;\n          const params = {\n            origins: `${yourLatitude},${yourLongitude}`,\n            destinations: `${stationLatitude},${stationLongitude}`,\n            key: \"AIzaSyDn7oQa4QsdEXc9GoIv5as8gMS8_uF73_4\"\n          };\n          const queryParams = new URLSearchParams(params).toString();\n          const requestUrl = `${apiEndpoint}?${queryParams}&callback=processResponse`;\n          try {\n            await new Promise((resolve, reject) => {\n              window.processResponse = response => {\n                const distance = response.rows[0].elements[0].distance.value;\n                updatedStations.push({\n                  ...station,\n                  distance\n                });\n                resolve();\n              };\n              const script = document.createElement(\"script\");\n              script.src = requestUrl;\n              script.async = true;\n              script.onerror = reject;\n              document.body.appendChild(script);\n            });\n          } catch (error) {\n            console.log(\"Error:\", error);\n          }\n        }\n        updatedStations.sort((a, b) => a.distance - b.distance);\n        console.log(updatedStations);\n      };\n      calculateDistances();\n    }\n  }, [currentLocation]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Card Display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(CardDisplay, \"92lfV7gyTXx7Gj654lsh/RTaREI=\");\n_c = CardDisplay;\nvar _c;\n$RefreshReg$(_c, \"CardDisplay\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","URL","CardDisplay","_s","stations","setStations","currentLocation","setCurrentLocation","fetch","then","response","json","data","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","lat","lng","error","console","yourLatitude","yourLongitude","fuelStations","station_name","apiEndpoint","calculateDistances","updatedStations","station","stationLatitude","stationLongitude","params","origins","destinations","key","queryParams","URLSearchParams","toString","requestUrl","Promise","resolve","reject","window","processResponse","distance","rows","elements","value","push","script","document","createElement","src","async","onerror","body","appendChild","log","sort","a","b","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tabo/Development/code/phase-2/phase-2-Project/Find-a-Supercharger-Frontend/src/components/Carddisplay.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst URL = 'http://localhost:3000/fuel_stations';\n\nexport default function CardDisplay() {\n  const [stations, setStations] = useState([]);\n  const [currentLocation, setCurrentLocation] = useState(null);\n\n  useEffect(() => {\n    fetch(URL)\n      .then(response => response.json())\n      .then(data => setStations(data));\n  }, []);\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setCurrentLocation({ lat: latitude, lng: longitude });\n        },\n        (error) => {\n          console.error(\"Error getting current location:\", error);\n        }\n      );\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  useEffect(() => {\n    if (currentLocation) {\n      const yourLatitude = currentLocation.lat;\n      const yourLongitude = currentLocation.lng;\n\n      const fuelStations = [\n        {\n          station_name: \"Colonie Center - Tesla Supercharger\",\n          latitude: 42.710356,\n          longitude: -73.819109\n        },\n        {\n          station_name: \"The Spot Restaurant - Tesla Supercharger\",\n          latitude: 42.145542,\n          longitude: -75.902081\n        },\n        // Add other fuel stations here\n      ];\n\n      const apiEndpoint = \"https://maps.googleapis.com/maps/api/distancematrix/json\";\n\n      const calculateDistances = async () => {\n        const updatedStations = [];\n\n        for (const station of fuelStations) {\n          const stationLatitude = station.latitude;\n          const stationLongitude = station.longitude;\n\n          const params = {\n            origins: `${yourLatitude},${yourLongitude}`,\n            destinations: `${stationLatitude},${stationLongitude}`,\n            key: \"AIzaSyDn7oQa4QsdEXc9GoIv5as8gMS8_uF73_4\"\n          };\n\n          const queryParams = new URLSearchParams(params).toString();\n          const requestUrl = `${apiEndpoint}?${queryParams}&callback=processResponse`;\n\n          try {\n            await new Promise((resolve, reject) => {\n              window.processResponse = (response) => {\n                const distance = response.rows[0].elements[0].distance.value;\n                updatedStations.push({\n                  ...station,\n                  distance\n                });\n                resolve();\n              };\n\n              const script = document.createElement(\"script\");\n              script.src = requestUrl;\n              script.async = true;\n              script.onerror = reject;\n              document.body.appendChild(script);\n            });\n          } catch (error) {\n            console.log(\"Error:\", error);\n          }\n        }\n\n        updatedStations.sort((a, b) => a.distance - b.distance);\n        console.log(updatedStations);\n      };\n\n      calculateDistances();\n    }\n  }, [currentLocation]);\n\n  return (\n    <>   \n      <h1>Card Display</h1>\n      {/* Render your stations and distances */}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}