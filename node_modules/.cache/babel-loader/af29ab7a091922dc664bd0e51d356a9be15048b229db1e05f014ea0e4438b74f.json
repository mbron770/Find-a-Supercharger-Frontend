{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import Card from \"react-bootstrap/Card\";\n// import Button from \"react-bootstrap/Button\";\n// import Form from \"react-bootstrap/Form\";\n// import Modal from \"react-bootstrap/Modal\";\n// import Accordion from \"react-bootstrap/Accordion\";\n// import Badge from \"react-bootstrap/Badge\";\n// import Alert from \"react-bootstrap/Alert\";\n// import Col from \"react-bootstrap/Col\";\n// import Image from \"react-bootstrap/Image\";\n// import { GoogleMap, Marker, InfoWindowF } from \"@react-google-maps/api\";\n\n// const URL = \"http://localhost:3000/fuel_stations\";\n\n// export default function Individualcard({\n//   station,\n//   stations,\n//   setStations,\n//   stationLatitude,\n//   stationLongitude,\n// }) {\n//   const [showModal, setShowModal] = useState(false);\n//   const [comment, setComment] = useState(\"\");\n//   const [currentLocation, setCurrentLocation] = useState(null);\n//   const [selectedStation, setSelectedStation] = useState(null);\n//   const [distance, setDistance] = useState(null);\n//   const [duration, setDuration] = useState(null);\n\n//   useEffect(() => {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           const { latitude, longitude } = position.coords;\n//           setCurrentLocation({ lat: latitude, lng: longitude });\n//         },\n//         (error) => {\n//           console.error(\"Error getting current location:\", error);\n//         }\n//       );\n//     } else {\n//       console.error(\"Geolocation is not supported by this browser.\");\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (selectedStation && currentLocation) {\n//       const directionsService = new window.google.maps.DirectionsService();\n//       const request = {\n//         origin: currentLocation,\n//         destination: {\n//           lat: stationLatitude,\n//           lng: stationLongitude,\n//         },\n//         travelMode: \"DRIVING\",\n//         drivingOptions: {\n//           departureTime: new Date(),\n//         },\n//       };\n//       directionsService.route(request, handleDirectionsResponse);\n//     }\n//   }, [selectedStation, currentLocation]);\n\n//   function handleDirectionsResponse(response, status) {\n//     if (status === \"OK\") {\n//       const leg = response.routes[0].legs[0];\n//       setDistance(leg.distance.text);\n//       setDuration(leg.duration.text);\n//     } else {\n//       console.error(\"Directions request failed:\", status);\n//       setDistance(null);\n//       setDuration(null);\n//     }\n//   }\n\n//   function handleGetDirections(stationLatitude, stationLongitude) {\n//     if (currentLocation) {\n//       const origin = `${currentLocation.lat},${currentLocation.lng}`;\n//       const destination = `${stationLatitude},${stationLongitude}`;\n//       const directionsUrl = `https://www.google.com/maps/dir/?api=1&origin=${origin}&destination=${destination}`;\n//       window.open(directionsUrl, \"_blank\");\n//     }\n//   }\n\n//   function handleCommentChange(event) {\n//     setComment(event.target.value);\n//   }\n\n//   function handleAddReview() {\n//     setShowModal(true);\n//   }\n\n//   function handleCloseModal() {\n//     setComment(\"\");\n//     setShowModal(false);\n//   }\n\n//   function handleAddComment(e) {\n//     e.preventDefault();\n//     const updatedComments = station.comments\n//       ? [...station.comments, comment]\n//       : [comment];\n//     const updatedStation = {\n//       ...station,\n//       comments: updatedComments,\n//     };\n\n//     fetch(`${URL}/${station.id}`, {\n//       method: \"PATCH\",\n//       headers: {\n//         \"Content-type\": \"application/json\",\n//         Accept: \"application/json\",\n//       },\n//       body: JSON.stringify({ comments: updatedComments }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => {\n//         // Find the index of the updated station in the stations array\n//         const updatedIndex = stations.findIndex((s) => s.id === station.id);\n\n//         // Create a new stations array with the updated station\n//         const updatedStations = [\n//           ...stations.slice(0, updatedIndex),\n//           updatedStation,\n//           ...stations.slice(updatedIndex + 1),\n//         ];\n\n//         // Update the stations state with the updatedStations array\n//         setStations(updatedStations);\n//       })\n//       .catch((error) => {\n//         console.log(\"Error:\", error);\n//       });\n\n//     setShowModal(false);\n//     setComment(\"\");\n//   }\n//   const containerStyle = {\n//     width: \"100%\",\n//     height: \"25vh\",\n//   };\n\n//   const desitantionMarkers = {\n//     lat: stationLatitude,\n//     lng: stationLongitude,\n//   };\n\n//   //console.log(desitantionMarkers);\n\n//   return (\n//     <>\n//       <Card bg=\"white\" style={{ flex: \"1\" }}>\n//         <Card.Header\n//           style={{\n//             textAlign: \"center\",\n//             fontSize: \"22px\",\n//             fontFamily: \"Helvetica Neue\",\n//             fontStyle: \"normal\",\n//             backgroundColor: \"black\",\n//             color: \"white\",\n//           }}\n//         >\n//           {\" \"}\n//           {station.station_name.split(\" - Tesla Supercharger\")}\n//         </Card.Header>\n\n//         <Card.Body>\n//           <GoogleMap\n//             mapContainerStyle={containerStyle}\n//             center={desitantionMarkers}\n//             zoom={15}\n//           >\n//             {currentLocation && (\n//               <Marker\n//                 position={desitantionMarkers}\n//                 title=\"Station\"\n//                 onClick={(e) =>\n//                   handleGetDirections(stationLatitude, stationLongitude)\n//                 }\n//               />\n//             )}\n//           </GoogleMap>\n//           {\"\\u00A0\"}\n//           <Card.Title>{`${station.street_address}`}</Card.Title>\n//           <Card.Title>{`${station.city}, ${station.state} ${station.zip}`}</Card.Title>\n\n//           <br></br>\n//           <Card.Subtitle>\n//             <span style={{ fontSize: \"16px\", fontWeight: \"bold\" }}>Access</span>\n//             {\": \"}\n//             {station.access_days_time}\n//           </Card.Subtitle>\n//           <Card.Subtitle>\n//             <br></br>\n//             <span style={{ fontSize: \"16px\", fontWeight: \"bold\" }}>\n//               Distance\n//             </span>\n//             {\": \"}\n//             {station.distance.toFixed(2)} Miles\n//           </Card.Subtitle>\n//           <br></br>\n//           <Card.Subtitle>\n//             <span style={{ fontSize: \"16px\", fontWeight: \"bold\" }}>\n//               Pricing\n//             </span>\n//             {\": \"}\n//             {station.ev_pricing}\n//           </Card.Subtitle>\n//           <br></br>\n//           <Accordion defaultActiveKey=\"1\">\n//             <Accordion.Item eventKey=\"0\">\n//               <Accordion.Header>\n//                 {\" \"}\n//                 <span\n//                   style={{\n//                     fontSize: \"16px\",\n//                     fontWeight: \"bold\",\n//                     textAlign: \"center\",\n//                     marginRight: \"4px\",\n//                   }}\n//                 >\n//                   Reviews\n//                 </span>\n//                 {\"\\u00A0\"}\n//                 <Badge pill bg=\"secondary\">\n//                   {station.comments ? station.comments.length : 0}\n//                 </Badge>\n//               </Accordion.Header>\n//               <Accordion.Body>\n//                 {station.comments && station.comments.length > 0 ? (\n//                   station.comments.map((comment) => (\n//                     <Alert variant=\"dark\">\n//                       <Col xs={2} md={2}></Col>\n//                       <Image src=\"./thumbnail.png\" circle />\n//                       {\"\\u00A0\" + \"\\u00A0\"}\n//                       {comment}\n//                     </Alert>\n//                   ))\n//                 ) : (\n//                   <Alert variant=\"danger\">No Reviews Yet</Alert>\n//                 )}\n//                 <br></br>\n//                 <br></br>\n//                 <div className=\"d-grid gap-2\">\n//                   <Button\n//                     variant=\"dark\"\n//                     onClick={handleAddReview}\n//                     direction=\"horizontal\"\n//                     justify=\"center\"\n//                   >\n//                     Add Review\n//                   </Button>{\" \"}\n//                 </div>\n//               </Accordion.Body>\n//             </Accordion.Item>\n//           </Accordion>\n//           <br></br>\n\n//           <div className=\"d-grid gap-2\">\n//             <Button\n//               variant=\"dark\"\n//               onClick={(e) =>\n//                 handleGetDirections(stationLatitude, stationLongitude)\n//               }\n//             >\n//               Get Directions\n//             </Button>{\" \"}\n//           </div>\n//         </Card.Body>\n//       </Card>\n\n//       <Modal\n//         show={showModal}\n//         onHide={handleCloseModal}\n//         size=\"lg\"\n//         aria-labelledby=\"contained-modal-title-vcenter\"\n//         centered\n//       >\n//         <Modal.Header closeButton>\n//           <Modal.Title id=\"contained-modal-title-vcenter\">\n//             Add a Review\n//           </Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <h4>Your Review</h4>\n//           <Form>\n//             <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n//               <Form.Control\n//                 as=\"textarea\"\n//                 rows={3}\n//                 value={comment}\n//                 onChange={handleCommentChange}\n//                 placeholder=\"Type Something...\"\n//               />\n//             </Form.Group>{\" \"}\n//           </Form>\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <Button variant=\"dark\" onClick={handleAddComment}>\n//             Submit\n//           </Button>\n//           <Button variant=\"dark\" onClick={handleCloseModal}>\n//             Cancel\n//           </Button>\n//         </Modal.Footer>\n//       </Modal>\n//     </>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/Individualcard.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import Card from \"react-bootstrap/Card\";\n// import Button from \"react-bootstrap/Button\";\n// import Form from \"react-bootstrap/Form\";\n// import Modal from \"react-bootstrap/Modal\";\n// import Accordion from \"react-bootstrap/Accordion\";\n// import Badge from \"react-bootstrap/Badge\";\n// import Alert from \"react-bootstrap/Alert\";\n// import Col from \"react-bootstrap/Col\";\n// import Image from \"react-bootstrap/Image\";\n// import { GoogleMap, Marker, InfoWindowF } from \"@react-google-maps/api\";\n\n// const URL = \"http://localhost:3000/fuel_stations\";\n\n// export default function Individualcard({\n//   station,\n//   stations,\n//   setStations,\n//   stationLatitude,\n//   stationLongitude,\n// }) {\n//   const [showModal, setShowModal] = useState(false);\n//   const [comment, setComment] = useState(\"\");\n//   const [currentLocation, setCurrentLocation] = useState(null);\n//   const [selectedStation, setSelectedStation] = useState(null);\n//   const [distance, setDistance] = useState(null);\n//   const [duration, setDuration] = useState(null);\n\n//   useEffect(() => {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           const { latitude, longitude } = position.coords;\n//           setCurrentLocation({ lat: latitude, lng: longitude });\n//         },\n//         (error) => {\n//           console.error(\"Error getting current location:\", error);\n//         }\n//       );\n//     } else {\n//       console.error(\"Geolocation is not supported by this browser.\");\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (selectedStation && currentLocation) {\n//       const directionsService = new window.google.maps.DirectionsService();\n//       const request = {\n//         origin: currentLocation,\n//         destination: {\n//           lat: stationLatitude,\n//           lng: stationLongitude,\n//         },\n//         travelMode: \"DRIVING\",\n//         drivingOptions: {\n//           departureTime: new Date(),\n//         },\n//       };\n//       directionsService.route(request, handleDirectionsResponse);\n//     }\n//   }, [selectedStation, currentLocation]);\n\n\n//   function handleDirectionsResponse(response, status) {\n//     if (status === \"OK\") {\n//       const leg = response.routes[0].legs[0];\n//       setDistance(leg.distance.text);\n//       setDuration(leg.duration.text);\n//     } else {\n//       console.error(\"Directions request failed:\", status);\n//       setDistance(null);\n//       setDuration(null);\n//     }\n//   }\n\n//   function handleGetDirections(stationLatitude, stationLongitude) {\n//     if (currentLocation) {\n//       const origin = `${currentLocation.lat},${currentLocation.lng}`;\n//       const destination = `${stationLatitude},${stationLongitude}`;\n//       const directionsUrl = `https://www.google.com/maps/dir/?api=1&origin=${origin}&destination=${destination}`;\n//       window.open(directionsUrl, \"_blank\");\n//     }\n//   }\n\n//   function handleCommentChange(event) {\n//     setComment(event.target.value);\n//   }\n\n//   function handleAddReview() {\n//     setShowModal(true);\n//   }\n\n//   function handleCloseModal() {\n//     setComment(\"\");\n//     setShowModal(false);\n//   }\n\n//   function handleAddComment(e) {\n//     e.preventDefault();\n//     const updatedComments = station.comments\n//       ? [...station.comments, comment]\n//       : [comment];\n//     const updatedStation = {\n//       ...station,\n//       comments: updatedComments,\n//     };\n\n//     fetch(`${URL}/${station.id}`, {\n//       method: \"PATCH\",\n//       headers: {\n//         \"Content-type\": \"application/json\",\n//         Accept: \"application/json\",\n//       },\n//       body: JSON.stringify({ comments: updatedComments }),\n//     })\n//       .then((response) => response.json())\n//       .then((data) => {\n//         // Find the index of the updated station in the stations array\n//         const updatedIndex = stations.findIndex((s) => s.id === station.id);\n\n//         // Create a new stations array with the updated station\n//         const updatedStations = [\n//           ...stations.slice(0, updatedIndex),\n//           updatedStation,\n//           ...stations.slice(updatedIndex + 1),\n//         ];\n\n//         // Update the stations state with the updatedStations array\n//         setStations(updatedStations);\n//       })\n//       .catch((error) => {\n//         console.log(\"Error:\", error);\n//       });\n\n//     setShowModal(false);\n//     setComment(\"\");\n//   }\n//   const containerStyle = {\n//     width: \"100%\",\n//     height: \"25vh\",\n//   };\n\n//   const desitantionMarkers = {\n//     lat: stationLatitude,\n//     lng: stationLongitude,\n//   };\n\n//   //console.log(desitantionMarkers);\n\n//   return (\n//     <>\n//       <Card bg=\"white\" style={{ flex: \"1\" }}>\n//         <Card.Header\n//           style={{\n//             textAlign: \"center\",\n//             fontSize: \"22px\",\n//             fontFamily: \"Helvetica Neue\",\n//             fontStyle: \"normal\",\n//             backgroundColor: \"black\",\n//             color: \"white\",\n//           }}\n//         >\n//           {\" \"}\n//           {station.station_name.split(\" - Tesla Supercharger\")}\n//         </Card.Header>\n\n//         <Card.Body>\n//           <GoogleMap\n//             mapContainerStyle={containerStyle}\n//             center={desitantionMarkers}\n//             zoom={15}\n//           >\n//             {currentLocation && (\n//               <Marker\n//                 position={desitantionMarkers}\n//                 title=\"Station\"\n//                 onClick={(e) =>\n//                   handleGetDirections(stationLatitude, stationLongitude)\n//                 }\n//               />\n//             )}\n//           </GoogleMap>\n//           {\"\\u00A0\"}\n//           <Card.Title>{`${station.street_address}`}</Card.Title>\n//           <Card.Title>{`${station.city}, ${station.state} ${station.zip}`}</Card.Title>\n          \n//           <br></br>\n//           <Card.Subtitle>\n//             <span style={{ fontSize: \"16px\", fontWeight: \"bold\" }}>Access</span>\n//             {\": \"}\n//             {station.access_days_time}\n//           </Card.Subtitle>\n//           <Card.Subtitle>\n//             <br></br>\n//             <span style={{ fontSize: \"16px\", fontWeight: \"bold\" }}>\n//               Distance\n//             </span>\n//             {\": \"}\n//             {station.distance.toFixed(2)} Miles\n//           </Card.Subtitle>\n//           <br></br>\n//           <Card.Subtitle>\n//             <span style={{ fontSize: \"16px\", fontWeight: \"bold\" }}>\n//               Pricing\n//             </span>\n//             {\": \"}\n//             {station.ev_pricing}\n//           </Card.Subtitle>\n//           <br></br>\n//           <Accordion defaultActiveKey=\"1\">\n//             <Accordion.Item eventKey=\"0\">\n//               <Accordion.Header>\n//                 {\" \"}\n//                 <span\n//                   style={{\n//                     fontSize: \"16px\",\n//                     fontWeight: \"bold\",\n//                     textAlign: \"center\",\n//                     marginRight: \"4px\",\n//                   }}\n//                 >\n//                   Reviews\n//                 </span>\n//                 {\"\\u00A0\"}\n//                 <Badge pill bg=\"secondary\">\n//                   {station.comments ? station.comments.length : 0}\n//                 </Badge>\n//               </Accordion.Header>\n//               <Accordion.Body>\n//                 {station.comments && station.comments.length > 0 ? (\n//                   station.comments.map((comment) => (\n//                     <Alert variant=\"dark\">\n//                       <Col xs={2} md={2}></Col>\n//                       <Image src=\"./thumbnail.png\" circle />\n//                       {\"\\u00A0\" + \"\\u00A0\"}\n//                       {comment}\n//                     </Alert>\n//                   ))\n//                 ) : (\n//                   <Alert variant=\"danger\">No Reviews Yet</Alert>\n//                 )}\n//                 <br></br>\n//                 <br></br>\n//                 <div className=\"d-grid gap-2\">\n//                   <Button\n//                     variant=\"dark\"\n//                     onClick={handleAddReview}\n//                     direction=\"horizontal\"\n//                     justify=\"center\"\n//                   >\n//                     Add Review\n//                   </Button>{\" \"}\n//                 </div>\n//               </Accordion.Body>\n//             </Accordion.Item>\n//           </Accordion>\n//           <br></br>\n\n//           <div className=\"d-grid gap-2\">\n//             <Button\n//               variant=\"dark\"\n//               onClick={(e) =>\n//                 handleGetDirections(stationLatitude, stationLongitude)\n//               }\n//             >\n//               Get Directions\n//             </Button>{\" \"}\n//           </div>\n//         </Card.Body>\n//       </Card>\n\n//       <Modal\n//         show={showModal}\n//         onHide={handleCloseModal}\n//         size=\"lg\"\n//         aria-labelledby=\"contained-modal-title-vcenter\"\n//         centered\n//       >\n//         <Modal.Header closeButton>\n//           <Modal.Title id=\"contained-modal-title-vcenter\">\n//             Add a Review\n//           </Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <h4>Your Review</h4>\n//           <Form>\n//             <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n//               <Form.Control\n//                 as=\"textarea\"\n//                 rows={3}\n//                 value={comment}\n//                 onChange={handleCommentChange}\n//                 placeholder=\"Type Something...\"\n//               />\n//             </Form.Group>{\" \"}\n//           </Form>\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <Button variant=\"dark\" onClick={handleAddComment}>\n//             Submit\n//           </Button>\n//           <Button variant=\"dark\" onClick={handleCloseModal}>\n//             Cancel\n//           </Button>\n//         </Modal.Footer>\n//       </Modal>\n//     </>\n//   );\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}