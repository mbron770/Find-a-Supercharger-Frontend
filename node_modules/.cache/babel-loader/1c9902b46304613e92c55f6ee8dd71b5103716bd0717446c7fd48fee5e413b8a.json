{"ast":null,"code":"var _jsxFileName = \"/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/search.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Search(_ref) {\n  _s();\n  let {\n    currentLocation,\n    lat,\n    setLat,\n    lng,\n    setLng,\n    a,\n    address,\n    setAddress\n  } = _ref;\n  // const a ={...currentLocation}\n  // const [address, setAddress] = useState('');\n\n  useEffect(() => {\n    if (currentLocation) {\n      setLat(currentLocation.lat);\n      setLng(currentLocation.lng);\n    }\n  }, [currentLocation]);\n  const handleAddressSelect = async selectedAddress => {\n    setAddress(selectedAddress);\n    try {\n      const results = await geocodeByAddress(selectedAddress);\n      const selectedLocation = await getLatLng(results[0]);\n      const {\n        lat,\n        lng\n      } = selectedLocation;\n      console.log(`Latitude: ${lat}, Longitude: ${lng}`);\n      setLat(lat);\n      setLng(lng);\n      const addressArr = selectedAddress.split(', ');\n    } catch (error) {\n      console.log('Error:', error);\n    }\n  };\n  function handleAddressChange(selectedAddress) {\n    //console.log(address,\"   parent\")\n    if (address.length === 1) {\n      //console.log (\"DONE\")\n      setLat(currentLocation.lat);\n      setLng(currentLocation.lng);\n    }\n    setAddress(prevAddr => selectedAddress);\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"addressCityStateZip\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n          value: address,\n          onChange: handleAddressChange,\n          onSelect: handleAddressSelect,\n          children: _ref2 => {\n            let {\n              getInputProps,\n              suggestions,\n              getSuggestionItemProps,\n              loading\n            } = _ref2;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                ...getInputProps({\n                  placeholder: 'Address',\n                  size: 'sm'\n                }),\n                style: {\n                  width: '50%'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: \"Loading...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 35\n                }, this), suggestions.map(suggestion => {\n                  const style = {\n                    backgroundColor: suggestion.active ? '#e2e2e2' : '#fff'\n                  };\n                  return /*#__PURE__*/_createElement(\"div\", {\n                    ...getSuggestionItemProps(suggestion, {\n                      style\n                    }),\n                    key: suggestion.placeId,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 78,\n                      columnNumber: 27\n                    }\n                  }, suggestion.description);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 19\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Search, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["useState","PlacesAutocomplete","geocodeByAddress","getLatLng","Form","Button","jsxDEV","_jsxDEV","createElement","_createElement","Fragment","_Fragment","Search","_ref","_s","currentLocation","lat","setLat","lng","setLng","a","address","setAddress","useEffect","handleAddressSelect","selectedAddress","results","selectedLocation","console","log","addressArr","split","error","handleAddressChange","length","prevAddr","children","Group","controlId","Label","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","onSelect","_ref2","getInputProps","suggestions","getSuggestionItemProps","loading","Control","placeholder","size","style","width","map","suggestion","backgroundColor","active","key","placeId","__self","__source","description","_c","$RefreshReg$"],"sources":["/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/search.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nexport default function Search({currentLocation, lat, setLat, lng, setLng, a, address, setAddress}) {\n  // const a ={...currentLocation}\n  // const [address, setAddress] = useState('');\n  \n  useEffect(() => {\n    if (currentLocation) {\n      setLat(currentLocation.lat);\n      setLng(currentLocation.lng);\n    }\n  }, [currentLocation]);\n\n  \n\n  const handleAddressSelect = async (selectedAddress) => {\n\n    setAddress(selectedAddress);\n\n    try {\n        const results = await geocodeByAddress(selectedAddress);\n        const selectedLocation = await getLatLng(results[0]);\n        const { lat, lng } = selectedLocation;\n        console.log(`Latitude: ${lat}, Longitude: ${lng}`);\n        setLat(lat)\n        setLng(lng)\n        const addressArr = selectedAddress.split(', ')\n\n        } catch (error) {\n            console.log('Error:', error);\n        }\n    };\n\n    function handleAddressChange (selectedAddress) {\n      //console.log(address,\"   parent\")\n      if (address.length === 1) {\n        //console.log (\"DONE\")\n        setLat(currentLocation.lat);\n        setLng(currentLocation.lng);\n      }\n      setAddress((prevAddr) => selectedAddress);\n    };\n\n\n\n\n\n\n    return (\n      <>\n      <Form.Group controlId=\"addressCityStateZip\">\n          <Form.Label>Address</Form.Label>\n          <div>\n              <PlacesAutocomplete\n                  value={address}\n                  onChange={handleAddressChange}\n                  onSelect={handleAddressSelect}\n              >\n                  {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                  <div>\n                      <Form.Control\n                      {...getInputProps({\n                          placeholder: 'Address',\n                          size: 'sm',\n                      })}\n                      style={{ width: '50%' }}\n                      />\n                      <div>\n                      {loading && <div>Loading...</div>}\n                      {suggestions.map((suggestion) => {\n                          const style = {\n                          backgroundColor: suggestion.active ? '#e2e2e2' : '#fff',\n                          };\n                          return (\n                          <div\n                              {...getSuggestionItemProps(suggestion, { style })}\n                              key={suggestion.placeId}\n                          >\n                              {suggestion.description}\n                          </div>\n                          );\n                      })}\n                      </div>\n                  </div>\n                  )}\n              </PlacesAutocomplete>\n\n          </div>\n      </Form.Group>\n      </>\n    );\n  }"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,kBAAkB,IAAIC,gBAAgB,EAAEC,SAAS,QAAQ,2BAA2B;AAC3F,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,MAAM,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,aAAA,IAAAC,cAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE5C,eAAe,SAASC,MAAMA,CAAAC,IAAA,EAAsE;EAAAC,EAAA;EAAA,IAArE;IAACC,eAAe;IAAEC,GAAG;IAAEC,MAAM;IAAEC,GAAG;IAAEC,MAAM;IAAEC,CAAC;IAAEC,OAAO;IAAEC;EAAU,CAAC,GAAAT,IAAA;EAChG;EACA;;EAEAU,SAAS,CAAC,MAAM;IACd,IAAIR,eAAe,EAAE;MACnBE,MAAM,CAACF,eAAe,CAACC,GAAG,CAAC;MAC3BG,MAAM,CAACJ,eAAe,CAACG,GAAG,CAAC;IAC7B;EACF,CAAC,EAAE,CAACH,eAAe,CAAC,CAAC;EAIrB,MAAMS,mBAAmB,GAAG,MAAOC,eAAe,IAAK;IAErDH,UAAU,CAACG,eAAe,CAAC;IAE3B,IAAI;MACA,MAAMC,OAAO,GAAG,MAAMxB,gBAAgB,CAACuB,eAAe,CAAC;MACvD,MAAME,gBAAgB,GAAG,MAAMxB,SAAS,CAACuB,OAAO,CAAC,CAAC,CAAC,CAAC;MACpD,MAAM;QAAEV,GAAG;QAAEE;MAAI,CAAC,GAAGS,gBAAgB;MACrCC,OAAO,CAACC,GAAG,CAAE,aAAYb,GAAI,gBAAeE,GAAI,EAAC,CAAC;MAClDD,MAAM,CAACD,GAAG,CAAC;MACXG,MAAM,CAACD,GAAG,CAAC;MACX,MAAMY,UAAU,GAAGL,eAAe,CAACM,KAAK,CAAC,IAAI,CAAC;IAE9C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZJ,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEG,KAAK,CAAC;IAChC;EACJ,CAAC;EAED,SAASC,mBAAmBA,CAAER,eAAe,EAAE;IAC7C;IACA,IAAIJ,OAAO,CAACa,MAAM,KAAK,CAAC,EAAE;MACxB;MACAjB,MAAM,CAACF,eAAe,CAACC,GAAG,CAAC;MAC3BG,MAAM,CAACJ,eAAe,CAACG,GAAG,CAAC;IAC7B;IACAI,UAAU,CAAEa,QAAQ,IAAKV,eAAe,CAAC;EAC3C;EAAC;EAOD,oBACElB,OAAA,CAAAI,SAAA;IAAAyB,QAAA,eACA7B,OAAA,CAACH,IAAI,CAACiC,KAAK;MAACC,SAAS,EAAC,qBAAqB;MAAAF,QAAA,gBACvC7B,OAAA,CAACH,IAAI,CAACmC,KAAK;QAAAH,QAAA,EAAC;MAAO;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eAChCpC,OAAA;QAAA6B,QAAA,eACI7B,OAAA,CAACN,kBAAkB;UACf2C,KAAK,EAAEvB,OAAQ;UACfwB,QAAQ,EAAEZ,mBAAoB;UAC9Ba,QAAQ,EAAEtB,mBAAoB;UAAAY,QAAA,EAE7BW,KAAA;YAAA,IAAC;cAAEC,aAAa;cAAEC,WAAW;cAAEC,sBAAsB;cAAEC;YAAQ,CAAC,GAAAJ,KAAA;YAAA,oBACjExC,OAAA;cAAA6B,QAAA,gBACI7B,OAAA,CAACH,IAAI,CAACgD,OAAO;gBAAA,GACTJ,aAAa,CAAC;kBACdK,WAAW,EAAE,SAAS;kBACtBC,IAAI,EAAE;gBACV,CAAC,CAAC;gBACFC,KAAK,EAAE;kBAAEC,KAAK,EAAE;gBAAM;cAAE;gBAAAhB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACvB,CAAC,eACFpC,OAAA;gBAAA6B,QAAA,GACCe,OAAO,iBAAI5C,OAAA;kBAAA6B,QAAA,EAAK;gBAAU;kBAAAI,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,EAChCM,WAAW,CAACQ,GAAG,CAAEC,UAAU,IAAK;kBAC7B,MAAMH,KAAK,GAAG;oBACdI,eAAe,EAAED,UAAU,CAACE,MAAM,GAAG,SAAS,GAAG;kBACjD,CAAC;kBACD,oBACAnD,cAAA;oBAAA,GACQyC,sBAAsB,CAACQ,UAAU,EAAE;sBAAEH;oBAAM,CAAC,CAAC;oBACjDM,GAAG,EAAEH,UAAU,CAACI,OAAQ;oBAAAC,MAAA;oBAAAC,QAAA;sBAAAxB,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA;kBAAA,GAEvBe,UAAU,CAACO,WACX,CAAC;gBAEV,CAAC,CAAC;cAAA;gBAAAzB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACG,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL,CAAC;UAAA;QACL;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACe;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEpB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC,gBACX,CAAC;AAEP;AAAC7B,EAAA,CAzFqBF,MAAM;AAAAsD,EAAA,GAANtD,MAAM;AAAA,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}