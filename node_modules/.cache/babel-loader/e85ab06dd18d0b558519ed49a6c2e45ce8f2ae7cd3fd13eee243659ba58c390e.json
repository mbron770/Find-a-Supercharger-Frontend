{"ast":null,"code":"var _jsxFileName = \"/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/routes/allchargers.jsx\",\n  _s = $RefreshSig$();\nimport Carddisplay from \"../components/carddisplay\";\nimport { useEffect, useState } from \"react\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst URL = 'http://localhost:3000/fuel_stations';\nexport default function AllChargers() {\n  _s();\n  const [stations, setStations] = useState([]);\n  const [currentLocation, setCurrentLocation] = useState(null);\n  const [isLocationLoaded, setLocationLoaded] = useState(false);\n  const [searchLocation, setsearchLocation] = useState('');\n  const [testLocation, setTestLocation] = useState({});\n  useEffect(() => {\n    fetch(URL).then(response => response.json()).then(data => setStations(data));\n  }, []);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCurrentLocation({\n          lat: latitude,\n          lng: longitude\n        });\n        setLocationLoaded(true);\n        setTestLocation(currentLocation);\n      }, error => {\n        console.error(\"Error getting current location:\", error);\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  // const allStations = stations.filter(station => station.station_name.toLowerCase().includes(searchLocation.toLowerCase()))\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Carddisplay, {\n      stations: stations.filter(station => station.street_address.toLowerCase().includes(searchLocation.toLowerCase())),\n      currentLocation: currentLocation,\n      isLocationLoaded: isLocationLoaded,\n      setStations: setStations,\n      searchLocation: searchLocation,\n      setsearchLocation: setsearchLocation,\n      testLocation: testLocation,\n      setTestLocation: setTestLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(AllChargers, \"eslgdwJvFJsYYL6yzmp7QhyZJYU=\");\n_c = AllChargers;\nvar _c;\n$RefreshReg$(_c, \"AllChargers\");","map":{"version":3,"names":["Carddisplay","useEffect","useState","PlacesAutocomplete","geocodeByAddress","getLatLng","jsxDEV","_jsxDEV","Fragment","_Fragment","URL","AllChargers","_s","stations","setStations","currentLocation","setCurrentLocation","isLocationLoaded","setLocationLoaded","searchLocation","setsearchLocation","testLocation","setTestLocation","fetch","then","response","json","data","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","lat","lng","error","console","children","filter","station","street_address","toLowerCase","includes","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/routes/allchargers.jsx"],"sourcesContent":["import Carddisplay from \"../components/carddisplay\"\nimport { useEffect,useState } from \"react\";\n\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from \"react-places-autocomplete\";\n\nconst URL = 'http://localhost:3000/fuel_stations';\n\nexport default function AllChargers() {\n    const [stations, setStations] = useState([]);\n    const [currentLocation, setCurrentLocation] = useState(null);\n    const [isLocationLoaded, setLocationLoaded] = useState(false);\n    const [searchLocation, setsearchLocation] = useState('')\n    const [testLocation, setTestLocation] = useState({})\n\n    useEffect(() => {\n        fetch(URL)\n          .then(response => response.json())\n          .then(data => setStations(data));\n      }, []);\n    \n      useEffect(() => {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(\n            (position) => {\n              const { latitude, longitude } = position.coords;\n              setCurrentLocation({ lat: latitude, lng: longitude });\n              setLocationLoaded(true);\n              setTestLocation(currentLocation)\n            },\n            (error) => {\n              console.error(\"Error getting current location:\", error);\n            }\n          );\n        } else {\n          console.error(\"Geolocation is not supported by this browser.\");\n        }\n      }, []); \n\n\n     // const allStations = stations.filter(station => station.station_name.toLowerCase().includes(searchLocation.toLowerCase()))\n\n\n\n    return (\n        <>\n            <Carddisplay \n            \n            stations={stations.filter(station => station.street_address.toLowerCase().includes(searchLocation.toLowerCase()))} \n            currentLocation={currentLocation} \n            isLocationLoaded={isLocationLoaded} \n            setStations={setStations}\n            searchLocation = {searchLocation}\n            setsearchLocation = {setsearchLocation}\n            testLocation = {testLocation}\n            setTestLocation = {setTestLocation}\n            \n            \n            />\n        </>\n    )\n}\n\n\n"],"mappings":";;AAAA,OAAOA,WAAW,MAAM,2BAA2B;AACnD,SAASC,SAAS,EAACC,QAAQ,QAAQ,OAAO;AAE1C,OAAOC,kBAAkB,IACvBC,gBAAgB,EAChBC,SAAS,QACJ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnC,MAAMC,GAAG,GAAG,qCAAqC;AAEjD,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACe,gBAAgB,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACiB,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACZsB,KAAK,CAACb,GAAG,CAAC,CACPc,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIb,WAAW,CAACa,IAAI,CAAC,CAAC;EACpC,CAAC,EAAE,EAAE,CAAC;EAEN1B,SAAS,CAAC,MAAM;IACd,IAAI2B,SAAS,CAACC,WAAW,EAAE;MACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACrCC,QAAQ,IAAK;QACZ,MAAM;UAAEC,QAAQ;UAAEC;QAAU,CAAC,GAAGF,QAAQ,CAACG,MAAM;QAC/ClB,kBAAkB,CAAC;UAAEmB,GAAG,EAAEH,QAAQ;UAAEI,GAAG,EAAEH;QAAU,CAAC,CAAC;QACrDf,iBAAiB,CAAC,IAAI,CAAC;QACvBI,eAAe,CAACP,eAAe,CAAC;MAClC,CAAC,EACAsB,KAAK,IAAK;QACTC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD,CACF,CAAC;IACH,CAAC,MAAM;MACLC,OAAO,CAACD,KAAK,CAAC,+CAA+C,CAAC;IAChE;EACF,CAAC,EAAE,EAAE,CAAC;;EAGP;;EAID,oBACI9B,OAAA,CAAAE,SAAA;IAAA8B,QAAA,eACIhC,OAAA,CAACP,WAAW;MAEZa,QAAQ,EAAEA,QAAQ,CAAC2B,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACC,cAAc,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACzB,cAAc,CAACwB,WAAW,CAAC,CAAC,CAAC,CAAE;MAClH5B,eAAe,EAAEA,eAAgB;MACjCE,gBAAgB,EAAEA,gBAAiB;MACnCH,WAAW,EAAEA,WAAY;MACzBK,cAAc,EAAIA,cAAe;MACjCC,iBAAiB,EAAIA,iBAAkB;MACvCC,YAAY,EAAIA,YAAa;MAC7BC,eAAe,EAAIA;IAAgB;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGlC;EAAC,gBACJ,CAAC;AAEX;AAACpC,EAAA,CArDuBD,WAAW;AAAAsC,EAAA,GAAXtC,WAAW;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}