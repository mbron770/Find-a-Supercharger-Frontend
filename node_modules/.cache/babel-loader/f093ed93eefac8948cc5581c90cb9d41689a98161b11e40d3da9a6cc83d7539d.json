{"ast":null,"code":"var _jsxFileName = \"/Users/tabo/Development/code/phase-2/phase-2-Project/Find-a-Supercharger-Frontend/src/components/Carddisplay.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst URL = 'http://localhost:3000/fuel_stations';\nexport default function Carddisplay() {\n  _s();\n  const [stations, setStations] = useState([]);\n  const [currentLocation, setCurrentLocation] = useState(null);\n  useEffect(() => {\n    fetch(URL).then(response => response.json()).then(data => setStations(data));\n  }, []);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCurrentLocation({\n          lat: latitude,\n          lng: longitude\n        });\n      }, error => {\n        console.error(\"Error getting current location:\", error);\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n  const axios = require('axios');\n\n  // Your location coordinates\n  const yourLatitude = currentLocation.lat;\n  const yourLongitude = currentLocation.lng;\n\n  // Fuel stations data (assuming it's stored in an array called 'fuelStations')\n  const fuelStations = [...stations];\n\n  // Google Maps Distance Matrix API endpoint\n  const apiEndpoint = \"https://maps.googleapis.com/maps/api/distancematrix/json\";\n\n  // Calculate distances for each fuel station\n  fuelStations.forEach(station => {\n    // Get the station's latitude and longitude\n    const stationLatitude = station.latitude;\n    const stationLongitude = station.longitude;\n\n    // Make a request to the Google Maps Distance Matrix API\n    const params = {\n      origins: `${yourLatitude},${yourLongitude}`,\n      destinations: `${stationLatitude},${stationLongitude}`,\n      key: \"YOUR_GOOGLE_MAPS_API_KEY\"\n    };\n    axios.get(apiEndpoint, {\n      params\n    }).then(response => {\n      // Parse the response and extract the distance\n      const distance = response.data.rows[0].elements[0].distance.value;\n\n      // Add the distance to the fuel station data\n      station.distance = distance;\n    }).catch(error => {\n      console.log(\"Error:\", error);\n    });\n  });\n\n  // Wait for all distance calculations to finish\n  Promise.all(fuelStations.map(station => station.distance)).then(() => {\n    // Sort the fuel stations based on distance\n    fuelStations.sort((a, b) => a.distance - b.distance);\n\n    // Print the fuel stations sorted by distance\n    fuelStations.forEach(station => {\n      console.log(`Station: ${station.station_name}`);\n      console.log(`Distance: ${station.distance} meters`);\n      console.log();\n    });\n  });\n  console.log(stations);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"card display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Carddisplay, \"oiXyzruGPcuC+IwOhjpQXwwuu8k=\");\n_c = Carddisplay;\nvar _c;\n$RefreshReg$(_c, \"Carddisplay\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","URL","Carddisplay","_s","stations","setStations","currentLocation","setCurrentLocation","fetch","then","response","json","data","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","lat","lng","error","console","axios","require","yourLatitude","yourLongitude","fuelStations","apiEndpoint","forEach","station","stationLatitude","stationLongitude","params","origins","destinations","key","get","distance","rows","elements","value","catch","log","Promise","all","map","sort","a","b","station_name","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tabo/Development/code/phase-2/phase-2-Project/Find-a-Supercharger-Frontend/src/components/Carddisplay.jsx"],"sourcesContent":["import React from \"react\";\nimport { useState,useEffect } from \"react\";\n\nconst URL = 'http://localhost:3000/fuel_stations';\n\nexport default function Carddisplay() {\n\n  const [stations, setStations] = useState([]);\n  const [currentLocation, setCurrentLocation] = useState(null);\n\n  useEffect(() => {\n    fetch(URL)\n      .then(response => response.json())\n      .then(data => setStations(data));\n  }, []);\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setCurrentLocation({ lat: latitude, lng: longitude });\n        },\n        (error) => {\n          console.error(\"Error getting current location:\", error);\n        }\n      );\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  const axios = require('axios');\n\n  // Your location coordinates\n  const yourLatitude = currentLocation.lat;\n  const yourLongitude = currentLocation.lng;\n\n  // Fuel stations data (assuming it's stored in an array called 'fuelStations')\n  const fuelStations = [...stations]\n\n  // Google Maps Distance Matrix API endpoint\n  const apiEndpoint = \"https://maps.googleapis.com/maps/api/distancematrix/json\";\n\n  // Calculate distances for each fuel station\n  fuelStations.forEach(station => {\n    // Get the station's latitude and longitude\n    const stationLatitude = station.latitude;\n    const stationLongitude = station.longitude;\n\n    // Make a request to the Google Maps Distance Matrix API\n    const params = {\n      origins: `${yourLatitude},${yourLongitude}`,\n      destinations: `${stationLatitude},${stationLongitude}`,\n      key: \"YOUR_GOOGLE_MAPS_API_KEY\"\n    };\n\n    axios.get(apiEndpoint, { params })\n      .then(response => {\n        // Parse the response and extract the distance\n        const distance = response.data.rows[0].elements[0].distance.value;\n\n        // Add the distance to the fuel station data\n        station.distance = distance;\n      })\n      .catch(error => {\n        console.log(\"Error:\", error);\n      });\n  });\n\n  // Wait for all distance calculations to finish\n  Promise.all(fuelStations.map(station => station.distance))\n    .then(() => {\n      // Sort the fuel stations based on distance\n      fuelStations.sort((a, b) => a.distance - b.distance);\n\n      // Print the fuel stations sorted by distance\n      fuelStations.forEach(station => {\n        console.log(`Station: ${station.station_name}`);\n        console.log(`Distance: ${station.distance} meters`);\n        console.log();\n      });\n    });\n\n\n  console.log (stations)\n  \n  return (\n    <>   \n      <h1>card display</h1>\n    </>\n  );\n} "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}