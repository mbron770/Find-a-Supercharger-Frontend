{"ast":null,"code":"var _jsxFileName = \"/Users/tabo/Development/code/phase-2/phase-2-Project/Find-a-Supercharger-Frontend/src/components/Carddisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axiosJsonp from \"axios-jsonp\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst URL = 'http://localhost:3000/fuel_stations';\nexport default function CardDisplay() {\n  _s();\n  const [stations, setStations] = useState([]);\n  const [currentLocation, setCurrentLocation] = useState(null);\n  useEffect(() => {\n    fetch(URL).then(response => response.json()).then(data => setStations(data));\n  }, []);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCurrentLocation({\n          lat: latitude,\n          lng: longitude\n        });\n      }, error => {\n        console.error(\"Error getting current location:\", error);\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n  useEffect(() => {\n    if (currentLocation) {\n      const yourLatitude = currentLocation.lat;\n      const yourLongitude = currentLocation.lng;\n      const fuelStations = [{\n        station_name: \"Colonie Center - Tesla Supercharger\",\n        latitude: 42.710356,\n        longitude: -73.819109\n      }, {\n        station_name: \"The Spot Restaurant - Tesla Supercharger\",\n        latitude: 42.145542,\n        longitude: -75.902081\n      }\n      // Add other fuel stations here\n      ];\n\n      const apiEndpoint = \"https://maps.googleapis.com/maps/api/distancematrix/json\";\n      const calculateDistances = async () => {\n        const updatedStations = [];\n        for (const station of fuelStations) {\n          const stationLatitude = station.latitude;\n          const stationLongitude = station.longitude;\n          const params = {\n            origins: `${yourLatitude},${yourLongitude}`,\n            destinations: `${stationLatitude},${stationLongitude}`,\n            key: \"YOUR_API_KEY\"\n          };\n          try {\n            const response = await axiosJsonp.get(apiEndpoint, {\n              params\n            });\n            const distance = response.data.rows[0].elements[0].distance.value;\n            updatedStations.push({\n              ...station,\n              distance\n            });\n          } catch (error) {\n            console.log(\"Error:\", error);\n          }\n        }\n        updatedStations.sort((a, b) => a.distance - b.distance);\n        console.log(updatedStations);\n      };\n      calculateDistances();\n    }\n  }, [currentLocation]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Card Display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(CardDisplay, \"92lfV7gyTXx7Gj654lsh/RTaREI=\");\n_c = CardDisplay;\nvar _c;\n$RefreshReg$(_c, \"CardDisplay\");","map":{"version":3,"names":["React","useState","useEffect","axiosJsonp","jsxDEV","_jsxDEV","Fragment","_Fragment","URL","CardDisplay","_s","stations","setStations","currentLocation","setCurrentLocation","fetch","then","response","json","data","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","lat","lng","error","console","yourLatitude","yourLongitude","fuelStations","station_name","apiEndpoint","calculateDistances","updatedStations","station","stationLatitude","stationLongitude","params","origins","destinations","key","get","distance","rows","elements","value","push","log","sort","a","b","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tabo/Development/code/phase-2/phase-2-Project/Find-a-Supercharger-Frontend/src/components/Carddisplay.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axiosJsonp from \"axios-jsonp\";\n\nconst URL = 'http://localhost:3000/fuel_stations';\n\nexport default function CardDisplay() {\n  const [stations, setStations] = useState([]);\n  const [currentLocation, setCurrentLocation] = useState(null);\n\n  useEffect(() => {\n    fetch(URL)\n      .then(response => response.json())\n      .then(data => setStations(data));\n  }, []);\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setCurrentLocation({ lat: latitude, lng: longitude });\n        },\n        (error) => {\n          console.error(\"Error getting current location:\", error);\n        }\n      );\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  useEffect(() => {\n    if (currentLocation) {\n      const yourLatitude = currentLocation.lat;\n      const yourLongitude = currentLocation.lng;\n\n      const fuelStations = [\n        {\n          station_name: \"Colonie Center - Tesla Supercharger\",\n          latitude: 42.710356,\n          longitude: -73.819109\n        },\n        {\n          station_name: \"The Spot Restaurant - Tesla Supercharger\",\n          latitude: 42.145542,\n          longitude: -75.902081\n        },\n        // Add other fuel stations here\n      ];\n\n      const apiEndpoint = \"https://maps.googleapis.com/maps/api/distancematrix/json\";\n\n      const calculateDistances = async () => {\n        const updatedStations = [];\n\n        for (const station of fuelStations) {\n          const stationLatitude = station.latitude;\n          const stationLongitude = station.longitude;\n\n          const params = {\n            origins: `${yourLatitude},${yourLongitude}`,\n            destinations: `${stationLatitude},${stationLongitude}`,\n            key: \"YOUR_API_KEY\"\n          };\n\n          try {\n            const response = await axiosJsonp.get(apiEndpoint, { params });\n            const distance = response.data.rows[0].elements[0].distance.value;\n\n            updatedStations.push({\n              ...station,\n              distance\n            });\n          } catch (error) {\n            console.log(\"Error:\", error);\n          }\n        }\n\n        updatedStations.sort((a, b) => a.distance - b.distance);\n        console.log(updatedStations);\n      };\n\n      calculateDistances();\n    }\n  }, [currentLocation]);\n\n  return (\n    <>   \n      <h1>Card Display</h1>\n      {/* Render your stations and distances */}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}