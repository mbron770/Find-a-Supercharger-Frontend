{"ast":null,"code":"var _jsxFileName = \"/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/search.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Search(_ref) {\n  _s();\n  let {\n    currentLocation,\n    setLat,\n    setLng,\n    address,\n    setAddress\n  } = _ref;\n  useEffect(() => {\n    if (currentLocation) {\n      setLat(currentLocation.lat);\n      setLng(currentLocation.lng);\n    }\n  }, [currentLocation]);\n  const handleAddressSelect = async selectedAddress => {\n    setAddress(selectedAddress);\n    try {\n      const results = await geocodeByAddress(selectedAddress);\n      const selectedLocation = await getLatLng(results[0]);\n      const {\n        lat,\n        lng\n      } = selectedLocation;\n      console.log(`Latitude: ${lat}, Longitude: ${lng}`);\n      setLat(lat);\n      setLng(lng);\n      const addressArr = selectedAddress.split(\", \");\n    } catch (error) {\n      console.log(\"Error:\", error);\n    }\n  };\n  function handleAddressChange(selectedAddress) {\n    //console.log(address,\"   parent\")\n    if (address.length === 1) {\n      //console.log (\"DONE\")\n      setLat(currentLocation.lat);\n      setLng(currentLocation.lng);\n    }\n    setAddress(prevAddr => selectedAddress);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"addressCityStateZip\"\n        //   style={{ position: 'fixed', top: '6%',\n        //   left: '50%',\n        //   transform: 'translate(-50%, -50%)',\n\n        // }}\n        ,\n        style: {\n          width: \"60vh\",\n          position: \"absolute\",\n          //bottom: \"92%\",\n          top: '7%',\n          left: \"35%\",\n          // backgroundColor: \"transparent\",\n          // backgroundColor: \"rgba(211, 211, 211, 0.8)\",\n          zIndex: \"9999\",\n          borderRadius: \"25px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n            value: address,\n            onChange: handleAddressChange,\n            onSelect: handleAddressSelect,\n            children: _ref2 => {\n              let {\n                getInputProps,\n                suggestions,\n                getSuggestionItemProps,\n                loading\n              } = _ref2;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                  ...getInputProps({\n                    placeholder: \"Find a Charging Station...\",\n                    size: \"md\"\n                  }),\n                  style: {\n                    width: \"60vh\",\n                    position: \"fixed\",\n                    bottom: \"92%\",\n                    left: \"35%\",\n                    backgroundColor: \"transparent\",\n                    backgroundColor: \"rgba(211, 211, 211, 0.8)\",\n                    zIndex: \"9999\",\n                    borderRadius: \"25px\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: \"Loading...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 103,\n                    columnNumber: 33\n                  }, this), suggestions.map(suggestion => {\n                    const style = {\n                      backgroundColor: suggestion.active ? \"#e2e2e2\" : \"#fff\"\n                    };\n                    return /*#__PURE__*/_createElement(\"div\", {\n                      ...getSuggestionItemProps(suggestion, {\n                        style\n                      }),\n                      key: suggestion.placeId,\n                      __self: this,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 109,\n                        columnNumber: 25\n                      }\n                    }, suggestion.description);\n                  })]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 17\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Search, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["useState","useEffect","PlacesAutocomplete","geocodeByAddress","getLatLng","Form","Button","jsxDEV","_jsxDEV","createElement","_createElement","Fragment","_Fragment","Search","_ref","_s","currentLocation","setLat","setLng","address","setAddress","lat","lng","handleAddressSelect","selectedAddress","results","selectedLocation","console","log","addressArr","split","error","handleAddressChange","length","prevAddr","children","fileName","_jsxFileName","lineNumber","columnNumber","Group","controlId","style","width","position","top","left","zIndex","borderRadius","value","onChange","onSelect","_ref2","getInputProps","suggestions","getSuggestionItemProps","loading","Control","placeholder","size","bottom","backgroundColor","map","suggestion","active","key","placeId","__self","__source","description","_c","$RefreshReg$"],"sources":["/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/search.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from \"react-places-autocomplete\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nexport default function Search({\n  currentLocation,\n  setLat,\n  setLng,\n  address,\n  setAddress,\n}) {\n  useEffect(() => {\n    if (currentLocation) {\n      setLat(currentLocation.lat);\n      setLng(currentLocation.lng);\n    }\n  }, [currentLocation]);\n\n  const handleAddressSelect = async (selectedAddress) => {\n    setAddress(selectedAddress);\n\n    try {\n      const results = await geocodeByAddress(selectedAddress);\n      const selectedLocation = await getLatLng(results[0]);\n      const { lat, lng } = selectedLocation;\n      console.log(`Latitude: ${lat}, Longitude: ${lng}`);\n      setLat(lat);\n      setLng(lng);\n      const addressArr = selectedAddress.split(\", \");\n    } catch (error) {\n      console.log(\"Error:\", error);\n    }\n  };\n\n  function handleAddressChange(selectedAddress) {\n    //console.log(address,\"   parent\")\n    if (address.length === 1) {\n      //console.log (\"DONE\")\n      setLat(currentLocation.lat);\n      setLng(currentLocation.lng);\n    }\n    setAddress((prevAddr) => selectedAddress);\n  }\n\n  return (\n    <>\n      <div>\n        <br></br>\n        <Form.Group\n          controlId=\"addressCityStateZip\"\n          //   style={{ position: 'fixed', top: '6%',\n          //   left: '50%',\n          //   transform: 'translate(-50%, -50%)',\n\n          // }}\n          style={{\n            width: \"60vh\",\n            position: \"absolute\",\n            //bottom: \"92%\",\n            top: '7%',\n            left: \"35%\",\n            // backgroundColor: \"transparent\",\n            // backgroundColor: \"rgba(211, 211, 211, 0.8)\",\n             zIndex: \"9999\",\n             borderRadius: \"25px\",\n          }}\n        >\n          <div>\n            <PlacesAutocomplete\n              value={address}\n              onChange={handleAddressChange}\n              onSelect={handleAddressSelect}\n              \n            >\n              {({\n                getInputProps,\n                suggestions,\n                getSuggestionItemProps,\n                loading,\n              }) => (\n                <div>\n                  <Form.Control\n                    {...getInputProps({\n                      placeholder: \"Find a Charging Station...\",\n                      size: \"md\",\n                    })}\n                    style={{\n                      width: \"60vh\",\n                      position: \"fixed\",\n                      bottom: \"92%\",\n                      left: \"35%\",\n                      backgroundColor: \"transparent\",\n                      backgroundColor: \"rgba(211, 211, 211, 0.8)\",\n                      zIndex: \"9999\",\n                      borderRadius: \"25px\",\n                    }}\n                  />\n                  <div>\n                    {loading && <div>Loading...</div>}\n                    {suggestions.map((suggestion) => {\n                      const style = {\n                        backgroundColor: suggestion.active ? \"#e2e2e2\" : \"#fff\",\n                      };\n                      return (\n                        <div\n                          {...getSuggestionItemProps(suggestion, { style })}\n                          key={suggestion.placeId}\n                        >\n                          {suggestion.description}\n                        </div>\n                      );\n                    })}\n                    \n                  </div>\n                </div>\n              )}\n            </PlacesAutocomplete>\n          </div>\n        </Form.Group>\n      </div>\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}