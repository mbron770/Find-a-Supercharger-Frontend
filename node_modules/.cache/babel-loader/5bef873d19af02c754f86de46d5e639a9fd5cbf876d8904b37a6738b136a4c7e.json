{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nconst stateAbbreviations = ['AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY'];\nfunction Newstation() {\n  _s();\n  const [stationName, setStationName] = useState('');\n  const [address, setAddress] = useState('');\n  const [city, setCity] = useState('');\n  const [state, setState] = useState('');\n  const [pricing, setPricing] = useState('');\n  const [review, setReview] = useState([]);\n  const [chargerType, setChargerType] = useState('');\n  const [lat, setLat] = useState(0);\n  const [lng, setLng] = useState(0);\n  const [accessDaysTime, setAccessDayTime] = useState('');\n  const [zip, setZip] = useState('');\n  function handleAddressChange(selectedAddress) {\n    setAddress(selectedAddress);\n  }\n  ;\n  const handleAddressSelect = async selectedAddress => {\n    setAddress(selectedAddress);\n    try {\n      const results = await geocodeByAddress(selectedAddress);\n      const selectedLocation = await getLatLng(results[0]);\n      const {\n        lat,\n        lng\n      } = selectedLocation;\n      console.log(`Latitude: ${lat}, Longitude: ${lng}`);\n      //console.log (selectedAddress)\n      setLat(lat);\n      setLng(lng);\n      const addressArr = selectedAddress.split(', ');\n      // console.log (addressArr[addressArr.length-2])\n      // console.log (addressArr[addressArr.length-3])\n      setCity(addressArr[addressArr.length - 3]);\n      setState(addressArr[addressArr.length - 2]);\n    } catch (error) {\n      console.log('Error:', error);\n    }\n  };\n  function handleSubmit(event) {\n    event.preventDefault();\n    const newStation = {\n      \"access_days_time\": accessDaysTime,\n      \"station_name\": stationName,\n      \"station_phone\": \"877-798-3752\",\n      \"latitude\": lat,\n      \"longitude\": lng,\n      \"city\": city,\n      \"state\": state,\n      \"street_address\": address.split(',')[0],\n      \"country\": 'US',\n      \"zip\": zip,\n      \"comments\": review,\n      \"ev_pricing\": pricing\n    };\n    fetch('http://localhost:3000/fuel_stations', {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify(newStation)\n    }).then(response => response.json()).then(data => {\n      console.log(newStation);\n      setStationName('');\n      setAddress('');\n      setCity('');\n      setState('');\n      setPricing('');\n      setReview('');\n      setChargerType('');\n      setAccessDayTime('');\n      setZip('');\n    });\n  }\n  ;\n  return (\n    //     <div\n    //   className=\"tcl-video-container\"\n    //   style={{\n    //     position: \"fixed\",\n    //     bottom: 0,\n    //     left: 0,\n    //     width: \"100%\",\n    //     height: \"1%\",\n    //     backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n    //     display: \"flex\",\n    //     justifyContent: \"center\",\n    //     alignItems: \"center\"\n    //   }}\n    // >\n\n      /* <div\n       className=\"tcl-video-container\"\n      style={{\n         position: \"fixed\",\n         top: 0,\n         left: 0,\n         width: \"100vw\",\n         height: \"100vh\",\n         zIndex: -1,\n         overflow: \"hidden\",\n       }}\n      >\n       <video\n         className=\"tcl-asset tcl-video__asset lozad tcl-objectfit-position tcl-objectfit-position--center visible-no-fade-in\"\n         preload=\"auto\"\n         playsInline\n         data-autoplay-desktop={true}\n         data-autoplay-portrait={true}\n         data-autoplay-mobile={true}\n         data-play-on-hover={false}\n         muted\n         loop\n         controls={false}\n         data-src-desktop=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Desktop-NA.mp4\"\n         data-src-portrait=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Desktop-NA.mp4\"\n         data-src-mobile=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Mobile-NA.mp4\"\n         data-src=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Desktop-NA.mp4\"\n         data-object-fit={true}\n         src=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Desktop-NA.mp4\"\n         data-loaded={true}\n         autoPlay={true}\n         style={{\n           width: \"100%\",\n           height: \"100%\",\n           objectFit: \"cover\"\n         }}\n       ></video>\n       <h1\n         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n         style={{\n             whiteSpace: \"nowrap\",\n             overflow: \"hidden\",\n             textOverflow: \"ellipsis\",\n             position: \"absolute\",\n           top: \"10%\",\n           left: \"50%\",\n           transform: \"translate(-50%, -50%)\",\n           color: 'white',\n           fontSize: 26\n         }}\n       >\n         Add a Charging Station\n       </h1>\n       <h1\n         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n         style={{\n             whiteSpace: \"nowrap\",\n             overflow: \"hidden\",\n             textOverflow: \"ellipsis\",\n           \n             position: \"absolute\",\n           top: \"92%\",\n           left: \"50%\",\n           transform: \"translate(-50%, -50%)\",\n           color: 'white',\n           fontSize: 24\n         }}\n       >\n         15 min\n       </h1>\n       <h1\n         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n         style={{\n             whiteSpace: \"nowrap\",\n             overflow: \"hidden\",\n             textOverflow: \"ellipsis\",\n             position: \"absolute\",\n           top: \"95%\",\n           left: \"50%\",\n           transform: \"translate(-50%, -50%)\",\n           color: 'white',\n           fontSize: 12\n         }}\n       >\n         for a 200 mile charge\n       </h1>\n       <h1\n         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n         style={{\n             whiteSpace: \"nowrap\",\n             overflow: \"hidden\",\n             textOverflow: \"ellipsis\",\n             position: \"absolute\",\n           top: \"92%\",\n           left: \"40%\",\n           transform: \"translate(-50%, -50%)\",\n           color: 'white',\n           fontSize: 24\n         }}\n       >\n         1800+\n       </h1>\n       <h1\n         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n         style={{\n             whiteSpace: \"nowrap\",\n             overflow: \"hidden\",\n             textOverflow: \"ellipsis\",\n             position: \"absolute\",\n           top: \"95%\",\n           left: \"40%\",\n           transform: \"translate(-50%, -50%)\",\n           color: 'white',\n           fontSize: 12\n         }}\n       >\n        US Charging Stations\n       </h1>\n       <h1\n         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n         style={{\n             whiteSpace: \"nowrap\",\n             overflow: \"hidden\",\n             textOverflow: \"ellipsis\",\n             position: \"absolute\",\n           top: \"92%\",\n           left: \"60%\",\n           transform: \"translate(-50%, -50%)\",\n           color: 'white',\n           fontSize: 24\n         }}\n       >\n         $\n       </h1>\n       <h1\n         className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n         style={{\n             whiteSpace: \"nowrap\",\n             overflow: \"hidden\",\n             textOverflow: \"ellipsis\",\n             position: \"absolute\",\n           top: \"95%\",\n           left: \"60%\",\n           transform: \"translate(-50%, -50%)\",\n           color: 'white',\n           fontSize: 12\n         }}\n       >\n         less than gasoline\n       </h1>\n        <div\n         className=\"tcl-form-overlay\"\n         style={{\n             whiteSpace: \"nowrap\",\n             overflow: \"hidden\",\n             textOverflow: \"ellipsis\",\n           position: \"fixed\",\n           top: \"50%\",\n           left: \"50%\",\n           transform: \"translate(-50%, -50%)\",\n           backgroundColor: \"rgba(255, 255, 255, 0.5)\",\n           padding: \"20px\",\n           borderRadius: \"10px\"\n         }}\n       >\n           <Form onSubmit={handleSubmit}>\n             <Form.Group controlId=\"stationName\">\n                 <Form.Label>Station Name</Form.Label>\n                 <Form.Control\n                 type=\"text\"\n                 size=\"sm\"\n                 value={stationName}\n                 onChange={(e) => setStationName(e.target.value)}\n                 style={{ width: '100%' }}\n                 />\n             </Form.Group>\n              <Form.Group controlId=\"addressCityStateZip\">\n                 <Form.Label>Address, City, State</Form.Label>\n                 <div>\n                     <div>\n                     <PlacesAutocomplete\n                         value={address}\n                         onChange={handleAddressChange}\n                         onSelect={handleAddressSelect}\n                     >\n                         {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                         <div>\n                             <Form.Control\n                             {...getInputProps({\n                                 placeholder: 'Address',\n                                 size: 'sm',\n                             })}\n                             style={{ width: '100%' }}\n                             />\n                             <div>\n                             {loading && <div>Loading...</div>}\n                             {suggestions.map((suggestion) => {\n                                 const style = {\n                                 backgroundColor: suggestion.active ? '#e2e2e2' : '#fff',\n                                 };\n                                 return (\n                                 <div\n                                     {...getSuggestionItemProps(suggestion, { style })}\n                                     key={suggestion.placeId}\n                                 >\n                                     {suggestion.description}\n                                 </div>\n                                 );\n                             })}\n                             </div>\n                         </div>\n                         )}\n                     </PlacesAutocomplete>\n                     </div>\n                         <div style={{ display: 'flex', marginTop: '10px' }}>\n                             <div style={{ flex: 1, marginRight: '5px' }}>\n                                 <Form.Control\n                                     type=\"text\"\n                                     size=\"sm\"\n                                     placeholder=\"City\"\n                                     value={city}\n                                     onChange={(e) => setCity(e.target.value)}\n                                     style={{ width: '100%' }}\n                                 />\n                             </div>\n                             <div style={{ flex: 1, marginRight: '5px' }}>\n                                 <Form.Control\n                                     type=\"text\"\n                                     size=\"sm\"\n                                     placeholder=\"Zip\"\n                                     value={zip}\n                                     onChange={(e) => setZip(e.target.value)}\n                                     style={{ width: '100%' }}\n                                 />\n                             </div>\n                             <div style={{ flex: 1, marginLeft: '5px' }}>\n                                 <Form.Control\n                                     as=\"select\"\n                                     size=\"sm\"\n                                     value={state}\n                                     onChange={(e) => setState(e.target.value)}\n                                     style={{ width: '100%' }}\n                                 >\n                                     <option value=\"\">State</option>\n                                     {stateAbbreviations.map((state) => (\n                                         <option value={state} key={state}>\n                                         {state}\n                                         </option>\n                                     ))}\n                                 </Form.Control>\n                         </div>\n                     </div>\n                 </div>\n             </Form.Group>\n              <Form.Group controlId=\"pricing\">\n                 <Form.Label>Pricing</Form.Label>\n                 <Form.Control\n                     type=\"text\"\n                     size=\"sm\"\n                     value={pricing}\n                     onChange={(e) => setPricing(e.target.value)}\n                     style={{ width: '100%' }}\n                 />\n             </Form.Group>\n              <Form.Group controlId=\"accessdaytime\">\n                 <Form.Label>Access Hours</Form.Label>\n                 <Form.Control\n                     type=\"text\"\n                     size=\"sm\"\n                     value={accessDaysTime}\n                     onChange={(e) => setAccessDayTime(e.target.value)}\n                     style={{ width: '100%' }}\n                 />\n             </Form.Group>\n              <Form.Group controlId=\"chargerType\">\n                 <Form.Label>Charger Type</Form.Label>\n                 <Form.Control\n                     type=\"text\"\n                     size=\"sm\"\n                     value={chargerType}\n                     onChange={(e) => setChargerType(e.target.value)}\n                     style={{ width: '100%' }}\n                 />\n             </Form.Group>\n              <Form.Group controlId=\"review\">\n                 <Form.Label>Review/Comment</Form.Label>\n                 <Form.Control\n                     as=\"textarea\"\n                     rows={3}\n                     size=\"sm\"\n                     value={review}\n                     onChange={(e) => setReview([e.target.value])}\n                     style={{ width: '100%' }}\n                 />\n             </Form.Group>\n      <br></br>\n            \n             <div className=\"d-grid gap-2\">\n           <Button variant=\"danger\" size=\"lg\" type=\"submit\">\n             Add New Station\n           </Button>\n         </div>\n         </Form>\n       </div>\n      </div>\n      // </div> */{}\n  );\n}\n_s(Newstation, \"Hud3fPAhkU8ALKUXETLZapeWWWo=\");\n_c = Newstation;\nexport default Newstation;\nvar _c;\n$RefreshReg$(_c, \"Newstation\");","map":{"version":3,"names":["React","useState","Form","Button","PlacesAutocomplete","geocodeByAddress","getLatLng","stateAbbreviations","Newstation","_s","stationName","setStationName","address","setAddress","city","setCity","state","setState","pricing","setPricing","review","setReview","chargerType","setChargerType","lat","setLat","lng","setLng","accessDaysTime","setAccessDayTime","zip","setZip","handleAddressChange","selectedAddress","handleAddressSelect","results","selectedLocation","console","log","addressArr","split","length","error","handleSubmit","event","preventDefault","newStation","fetch","method","headers","body","JSON","stringify","then","response","json","data","_c","$RefreshReg$"],"sources":["/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/Newstation.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from \"react-places-autocomplete\";\n\nconst stateAbbreviations = [\n    'AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD',\n    'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC',\n    'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY'\n  ];\n\nfunction Newstation() {\n    const [stationName, setStationName] = useState('');\n    const [address, setAddress] = useState('');\n    const [city, setCity] = useState('');\n    const [state, setState] = useState('');\n    const [pricing, setPricing] = useState('');\n    const [review, setReview] = useState([]);\n    const [chargerType, setChargerType] = useState('');\n    const [lat,setLat] = useState(0)\n    const [lng,setLng] = useState(0)\n    const [accessDaysTime,setAccessDayTime] = useState('')\n    const [zip,setZip] = useState('')\n\n    function handleAddressChange (selectedAddress) {\n      setAddress(selectedAddress);\n    };\n\n    const handleAddressSelect = async (selectedAddress) => {\n      setAddress(selectedAddress);\n\n      try {\n          const results = await geocodeByAddress(selectedAddress);\n          const selectedLocation = await getLatLng(results[0]);\n          const { lat, lng } = selectedLocation;\n          console.log(`Latitude: ${lat}, Longitude: ${lng}`);\n          //console.log (selectedAddress)\n          setLat(lat)\n          setLng(lng)\n          const addressArr = selectedAddress.split(', ')\n          // console.log (addressArr[addressArr.length-2])\n          // console.log (addressArr[addressArr.length-3])\n          setCity (addressArr[addressArr.length-3])\n          setState (addressArr[addressArr.length-2])\n\n          } catch (error) {\n              console.log('Error:', error);\n          }\n      };\n\n      function handleSubmit (event) {\n          event.preventDefault();\n\n          const newStation = {\n              \"access_days_time\": accessDaysTime,\n              \"station_name\": stationName,\n              \"station_phone\": \"877-798-3752\",\n              \"latitude\": lat,\n              \"longitude\": lng,\n              \"city\": city,\n              \"state\": state,\n              \"street_address\": address.split(',')[0],\n              \"country\": 'US',\n              \"zip\": zip,\n              \"comments\": review,\n              \"ev_pricing\": pricing\n          }\n\n          fetch ('http://localhost:3000/fuel_stations', {\n              method: \"POST\",\n              headers: {\n                  \"Content-type\": \"application/json\",\n                  \"Accept\": \"application/json\"\n              },\n              body: JSON.stringify(newStation)\n          })\n          .then (response => response.json())\n          .then (data => {\n              console.log (newStation)\n              setStationName('');\n              setAddress('');\n              setCity('');\n              setState('');\n              setPricing('');\n              setReview('');\n              setChargerType('');\n              setAccessDayTime('')\n              setZip('')\n          })\n      };\n\n  return (\n\n//     <div\n//   className=\"tcl-video-container\"\n//   style={{\n//     position: \"fixed\",\n//     bottom: 0,\n//     left: 0,\n//     width: \"100%\",\n//     height: \"1%\",\n//     backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n//     display: \"flex\",\n//     justifyContent: \"center\",\n//     alignItems: \"center\"\n//   }}\n// >\n  \n\n\n{/* <div\n  className=\"tcl-video-container\"\nstyle={{\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    width: \"100vw\",\n    height: \"100vh\",\n    zIndex: -1,\n    overflow: \"hidden\",\n  }}\n>\n  <video\n    className=\"tcl-asset tcl-video__asset lozad tcl-objectfit-position tcl-objectfit-position--center visible-no-fade-in\"\n    preload=\"auto\"\n    playsInline\n    data-autoplay-desktop={true}\n    data-autoplay-portrait={true}\n    data-autoplay-mobile={true}\n    data-play-on-hover={false}\n    muted\n    loop\n    controls={false}\n    data-src-desktop=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Desktop-NA.mp4\"\n    data-src-portrait=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Desktop-NA.mp4\"\n    data-src-mobile=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Mobile-NA.mp4\"\n    data-src=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Desktop-NA.mp4\"\n    data-object-fit={true}\n    src=\"https://digitalassets.tesla.com/tesla-contents/video/upload/f_auto,q_auto:best/Supercharger-Main-Hero-Desktop-NA.mp4\"\n    data-loaded={true}\n    autoPlay={true}\n    style={{\n      width: \"100%\",\n      height: \"100%\",\n      objectFit: \"cover\"\n    }}\n  ></video>\n  <h1\n    className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n    style={{\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        position: \"absolute\",\n      top: \"10%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n      color: 'white',\n      fontSize: 26\n    }}\n  >\n    Add a Charging Station\n  </h1>\n  <h1\n    className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n    style={{\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n      \n        position: \"absolute\",\n      top: \"92%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n      color: 'white',\n      fontSize: 24\n    }}\n  >\n    15 min\n  </h1>\n  <h1\n    className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n    style={{\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        position: \"absolute\",\n      top: \"95%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n      color: 'white',\n      fontSize: 12\n    }}\n  >\n    for a 200 mile charge\n  </h1>\n  <h1\n    className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n    style={{\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        position: \"absolute\",\n      top: \"92%\",\n      left: \"40%\",\n      transform: \"translate(-50%, -50%)\",\n      color: 'white',\n      fontSize: 24\n    }}\n  >\n    1800+\n  </h1>\n  <h1\n    className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n    style={{\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        position: \"absolute\",\n      top: \"95%\",\n      left: \"40%\",\n      transform: \"translate(-50%, -50%)\",\n      color: 'white',\n      fontSize: 12\n    }}\n  >\n   US Charging Stations\n  </h1>\n  <h1\n    className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n    style={{\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        position: \"absolute\",\n      top: \"92%\",\n      left: \"60%\",\n      transform: \"translate(-50%, -50%)\",\n      color: 'white',\n      fontSize: 24\n    }}\n  >\n    $\n  </h1>\n  <h1\n    className=\"tcl-hero__heading tds-colorscheme--dark tds-animate_small--to_reveal\"\n    style={{\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        position: \"absolute\",\n      top: \"95%\",\n      left: \"60%\",\n      transform: \"translate(-50%, -50%)\",\n      color: 'white',\n      fontSize: 12\n    }}\n  >\n    less than gasoline\n  </h1>\n\n  <div\n    className=\"tcl-form-overlay\"\n    style={{\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n      position: \"fixed\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n      backgroundColor: \"rgba(255, 255, 255, 0.5)\",\n      padding: \"20px\",\n      borderRadius: \"10px\"\n    }}\n  >\n      <Form onSubmit={handleSubmit}>\n        <Form.Group controlId=\"stationName\">\n            <Form.Label>Station Name</Form.Label>\n            <Form.Control\n            type=\"text\"\n            size=\"sm\"\n            value={stationName}\n            onChange={(e) => setStationName(e.target.value)}\n            style={{ width: '100%' }}\n            />\n        </Form.Group>\n\n        <Form.Group controlId=\"addressCityStateZip\">\n            <Form.Label>Address, City, State</Form.Label>\n            <div>\n                <div>\n                <PlacesAutocomplete\n                    value={address}\n                    onChange={handleAddressChange}\n                    onSelect={handleAddressSelect}\n                >\n                    {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                    <div>\n                        <Form.Control\n                        {...getInputProps({\n                            placeholder: 'Address',\n                            size: 'sm',\n                        })}\n                        style={{ width: '100%' }}\n                        />\n                        <div>\n                        {loading && <div>Loading...</div>}\n                        {suggestions.map((suggestion) => {\n                            const style = {\n                            backgroundColor: suggestion.active ? '#e2e2e2' : '#fff',\n                            };\n                            return (\n                            <div\n                                {...getSuggestionItemProps(suggestion, { style })}\n                                key={suggestion.placeId}\n                            >\n                                {suggestion.description}\n                            </div>\n                            );\n                        })}\n                        </div>\n                    </div>\n                    )}\n                </PlacesAutocomplete>\n                </div>\n                    <div style={{ display: 'flex', marginTop: '10px' }}>\n                        <div style={{ flex: 1, marginRight: '5px' }}>\n                            <Form.Control\n                                type=\"text\"\n                                size=\"sm\"\n                                placeholder=\"City\"\n                                value={city}\n                                onChange={(e) => setCity(e.target.value)}\n                                style={{ width: '100%' }}\n                            />\n                        </div>\n                        <div style={{ flex: 1, marginRight: '5px' }}>\n                            <Form.Control\n                                type=\"text\"\n                                size=\"sm\"\n                                placeholder=\"Zip\"\n                                value={zip}\n                                onChange={(e) => setZip(e.target.value)}\n                                style={{ width: '100%' }}\n                            />\n                        </div>\n                        <div style={{ flex: 1, marginLeft: '5px' }}>\n                            <Form.Control\n                                as=\"select\"\n                                size=\"sm\"\n                                value={state}\n                                onChange={(e) => setState(e.target.value)}\n                                style={{ width: '100%' }}\n                            >\n                                <option value=\"\">State</option>\n                                {stateAbbreviations.map((state) => (\n                                    <option value={state} key={state}>\n                                    {state}\n                                    </option>\n                                ))}\n                            </Form.Control>\n                    </div>\n                </div>\n            </div>\n        </Form.Group>\n\n        <Form.Group controlId=\"pricing\">\n            <Form.Label>Pricing</Form.Label>\n            <Form.Control\n                type=\"text\"\n                size=\"sm\"\n                value={pricing}\n                onChange={(e) => setPricing(e.target.value)}\n                style={{ width: '100%' }}\n            />\n        </Form.Group>\n\n        <Form.Group controlId=\"accessdaytime\">\n            <Form.Label>Access Hours</Form.Label>\n            <Form.Control\n                type=\"text\"\n                size=\"sm\"\n                value={accessDaysTime}\n                onChange={(e) => setAccessDayTime(e.target.value)}\n                style={{ width: '100%' }}\n            />\n        </Form.Group>\n\n        <Form.Group controlId=\"chargerType\">\n            <Form.Label>Charger Type</Form.Label>\n            <Form.Control\n                type=\"text\"\n                size=\"sm\"\n                value={chargerType}\n                onChange={(e) => setChargerType(e.target.value)}\n                style={{ width: '100%' }}\n            />\n        </Form.Group>\n\n        <Form.Group controlId=\"review\">\n            <Form.Label>Review/Comment</Form.Label>\n            <Form.Control\n                as=\"textarea\"\n                rows={3}\n                size=\"sm\"\n                value={review}\n                onChange={(e) => setReview([e.target.value])}\n                style={{ width: '100%' }}\n            />\n        </Form.Group>\n<br></br>\n       \n        <div className=\"d-grid gap-2\">\n      <Button variant=\"danger\" size=\"lg\" type=\"submit\">\n        Add New Station\n      </Button>\n    </div>\n    </Form>\n  </div>\n</div>\n\n// </div> */}\n\n\n\n\n\n\n\n  );\n}\n\nexport default Newstation;\n"],"mappings":"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AEZ,IAAI;MACZ,OAAO,EAAEE,KAAK;MACd,gBAAgB,EAAEJ,OAAO,CAAC4B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACvC,SAAS,EAAE,IAAI;MACf,KAAK,EAAEV,GAAG;MACV,UAAU,EAAEV,MAAM;MAClB,YAAY,EAAEF;IAClB,CAAC;IAED6B,KAAK,CAAE,qCAAqC,EAAE;MAC1CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,QAAQ,EAAE;MACd,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,UAAU;IACnC,CAAC,CAAC,CACDO,IAAI,CAAEC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAClCF,IAAI,CAAEG,IAAI,IAAI;MACXnB,OAAO,CAACC,GAAG,CAAEQ,UAAU,CAAC;MACxBnC,cAAc,CAAC,EAAE,CAAC;MAClBE,UAAU,CAAC,EAAE,CAAC;MACdE,OAAO,CAAC,EAAE,CAAC;MACXE,QAAQ,CAAC,EAAE,CAAC;MACZE,UAAU,CAAC,EAAE,CAAC;MACdE,SAAS,CAAC,EAAE,CAAC;MACbE,cAAc,CAAC,EAAE,CAAC;MAClBM,gBAAgB,CAAC,EAAE,CAAC;MACpBE,MAAM,CAAC,EAAE,CAAC;IACd,CAAC,CAAC;EACN;EAAC;EAEL;IAEF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;MAIC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAjTC,CAwTW;EAAC;AASb;AAACtB,EAAA,CApaQD,UAAU;AAAAiD,EAAA,GAAVjD,UAAU;AAsanB,eAAeA,UAAU;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}