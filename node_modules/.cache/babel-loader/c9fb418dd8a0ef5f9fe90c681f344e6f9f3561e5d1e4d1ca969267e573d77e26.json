{"ast":null,"code":"const axios = require('axios');\n\n// Your location coordinates\nconst yourLatitude = 40.7052019;\nconst yourLongitude = -74.0140841;\n\n// Fuel stations data (assuming it's stored in an array called 'fuelStations')\nconst fuelStations = [{\n  station_name: \"Colonie Center - Tesla Supercharger\",\n  latitude: 42.710356,\n  longitude: -73.819109\n}, {\n  station_name: \"The Spot Restaurant - Tesla Supercharger\",\n  latitude: 42.145542,\n  longitude: -75.902081\n}\n// Add other fuel stations here\n];\n\n// Google Maps Directions API endpoint\nconst apiEndpoint = 'https://maps.googleapis.com/maps/api/directions/json';\n\n// Calculate distances for each fuel station\nfuelStations.forEach(station => {\n  const stationLatitude = station.latitude;\n  const stationLongitude = station.longitude;\n\n  // Make a request to the Google Maps Directions API\n  const params = {\n    origin: `${yourLatitude},${yourLongitude}`,\n    destination: `${stationLatitude},${stationLongitude}`,\n    key: 'AIzaSyDn7oQa4QsdEXc9GoIv5as8gMS8_uF73_4'\n  };\n  axios.get(apiEndpoint, {\n    params\n  }).then(response => {\n    // Parse the response and extract the driving distance\n    const distance = response.data.routes[0].legs[0].distance.text;\n\n    // Add the distance to the fuel station data\n    station.distance = distance;\n  }).catch(error => {\n    console.log('Error:', error);\n  });\n});\n\n// Wait for all distance calculations to finish\nPromise.all(fuelStations.map(station => station.distance)).then(() => {\n  // Sort the fuel stations based on distance\n  fuelStations.sort((a, b) => {\n    const distanceA = parseFloat(a.distance.split(' ')[0]);\n    const distanceB = parseFloat(b.distance.split(' ')[0]);\n    return distanceA - distanceB;\n  });\n\n  // Print the fuel stations sorted by distance\n  fuelStations.forEach(station => {\n    console.log(`Station: ${station.station_name}`);\n    console.log(`Distance: ${station.distance}`);\n    console.log();\n  });\n});","map":{"version":3,"names":["axios","require","yourLatitude","yourLongitude","fuelStations","station_name","latitude","longitude","apiEndpoint","forEach","station","stationLatitude","stationLongitude","params","origin","destination","key","get","then","response","distance","data","routes","legs","text","catch","error","console","log","Promise","all","map","sort","a","b","distanceA","parseFloat","split","distanceB"],"sources":["/Users/tabo/Development/code/phase-2/phase-2-Project/Find-a-Supercharger-Frontend/src/components/Carddisplay.jsx"],"sourcesContent":["const axios = require('axios');\n\n// Your location coordinates\nconst yourLatitude = 40.7052019;\nconst yourLongitude = -74.0140841;\n\n// Fuel stations data (assuming it's stored in an array called 'fuelStations')\nconst fuelStations = [\n  {\n    station_name: \"Colonie Center - Tesla Supercharger\",\n    latitude: 42.710356,\n    longitude: -73.819109\n  },\n  {\n    station_name: \"The Spot Restaurant - Tesla Supercharger\",\n    latitude: 42.145542,\n    longitude: -75.902081\n  },\n  // Add other fuel stations here\n];\n\n// Google Maps Directions API endpoint\nconst apiEndpoint = 'https://maps.googleapis.com/maps/api/directions/json';\n\n// Calculate distances for each fuel station\nfuelStations.forEach(station => {\n  const stationLatitude = station.latitude;\n  const stationLongitude = station.longitude;\n\n  // Make a request to the Google Maps Directions API\n  const params = {\n    origin: `${yourLatitude},${yourLongitude}`,\n    destination: `${stationLatitude},${stationLongitude}`,\n    key: 'AIzaSyDn7oQa4QsdEXc9GoIv5as8gMS8_uF73_4'\n  };\n\n  axios\n    .get(apiEndpoint, { params })\n    .then(response => {\n      // Parse the response and extract the driving distance\n      const distance = response.data.routes[0].legs[0].distance.text;\n\n      // Add the distance to the fuel station data\n      station.distance = distance;\n    })\n    .catch(error => {\n      console.log('Error:', error);\n    });\n});\n\n// Wait for all distance calculations to finish\nPromise.all(fuelStations.map(station => station.distance))\n  .then(() => {\n    // Sort the fuel stations based on distance\n    fuelStations.sort((a, b) => {\n      const distanceA = parseFloat(a.distance.split(' ')[0]);\n      const distanceB = parseFloat(b.distance.split(' ')[0]);\n      return distanceA - distanceB;\n    });\n\n    // Print the fuel stations sorted by distance\n    fuelStations.forEach(station => {\n      console.log(`Station: ${station.station_name}`);\n      console.log(`Distance: ${station.distance}`);\n      console.log();\n    });\n  });\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;;AAE9B;AACA,MAAMC,YAAY,GAAG,UAAU;AAC/B,MAAMC,aAAa,GAAG,CAAC,UAAU;;AAEjC;AACA,MAAMC,YAAY,GAAG,CACnB;EACEC,YAAY,EAAE,qCAAqC;EACnDC,QAAQ,EAAE,SAAS;EACnBC,SAAS,EAAE,CAAC;AACd,CAAC,EACD;EACEF,YAAY,EAAE,0CAA0C;EACxDC,QAAQ,EAAE,SAAS;EACnBC,SAAS,EAAE,CAAC;AACd;AACA;AAAA,CACD;;AAED;AACA,MAAMC,WAAW,GAAG,sDAAsD;;AAE1E;AACAJ,YAAY,CAACK,OAAO,CAACC,OAAO,IAAI;EAC9B,MAAMC,eAAe,GAAGD,OAAO,CAACJ,QAAQ;EACxC,MAAMM,gBAAgB,GAAGF,OAAO,CAACH,SAAS;;EAE1C;EACA,MAAMM,MAAM,GAAG;IACbC,MAAM,EAAG,GAAEZ,YAAa,IAAGC,aAAc,EAAC;IAC1CY,WAAW,EAAG,GAAEJ,eAAgB,IAAGC,gBAAiB,EAAC;IACrDI,GAAG,EAAE;EACP,CAAC;EAEDhB,KAAK,CACFiB,GAAG,CAACT,WAAW,EAAE;IAAEK;EAAO,CAAC,CAAC,CAC5BK,IAAI,CAACC,QAAQ,IAAI;IAChB;IACA,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACH,QAAQ,CAACI,IAAI;;IAE9D;IACAd,OAAO,CAACU,QAAQ,GAAGA,QAAQ;EAC7B,CAAC,CAAC,CACDK,KAAK,CAACC,KAAK,IAAI;IACdC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,KAAK,CAAC;EAC9B,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACAG,OAAO,CAACC,GAAG,CAAC1B,YAAY,CAAC2B,GAAG,CAACrB,OAAO,IAAIA,OAAO,CAACU,QAAQ,CAAC,CAAC,CACvDF,IAAI,CAAC,MAAM;EACV;EACAd,YAAY,CAAC4B,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC1B,MAAMC,SAAS,GAAGC,UAAU,CAACH,CAAC,CAACb,QAAQ,CAACiB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,MAAMC,SAAS,GAAGF,UAAU,CAACF,CAAC,CAACd,QAAQ,CAACiB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,OAAOF,SAAS,GAAGG,SAAS;EAC9B,CAAC,CAAC;;EAEF;EACAlC,YAAY,CAACK,OAAO,CAACC,OAAO,IAAI;IAC9BiB,OAAO,CAACC,GAAG,CAAE,YAAWlB,OAAO,CAACL,YAAa,EAAC,CAAC;IAC/CsB,OAAO,CAACC,GAAG,CAAE,aAAYlB,OAAO,CAACU,QAAS,EAAC,CAAC;IAC5CO,OAAO,CAACC,GAAG,CAAC,CAAC;EACf,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}