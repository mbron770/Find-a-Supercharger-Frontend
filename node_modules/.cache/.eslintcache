[{"/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/index.js":"1","/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/reportWebVitals.js":"2","/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/error.jsx":"3","/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/routes/reviews.jsx":"4","/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/routes/root.jsx":"5","/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/routes/allchargers.jsx":"6","/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/app.jsx":"7","/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/nav.jsx":"8","/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/map.jsx":"9","/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/carddisplay.jsx":"10","/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/individualcard.jsx":"11","/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/Individualcard.jsx":"12","/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/Newstation.jsx":"13","/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/search.jsx":"14"},{"size":1271,"mtime":1687897276325,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1687877412409,"results":"17","hashOfConfig":"16"},{"size":392,"mtime":1687877412408,"results":"18","hashOfConfig":"16"},{"size":204,"mtime":1687897085462,"results":"19","hashOfConfig":"16"},{"size":183,"mtime":1687877412409,"results":"20","hashOfConfig":"16"},{"size":1974,"mtime":1687975005175,"results":"21","hashOfConfig":"16"},{"size":545,"mtime":1687990616590,"results":"22","hashOfConfig":"16"},{"size":1590,"mtime":1688050598005,"results":"23","hashOfConfig":"16"},{"size":4247,"mtime":1688055335807,"results":"24","hashOfConfig":"16"},{"size":3102,"mtime":1688054220778,"results":"25","hashOfConfig":"16"},{"size":769,"mtime":1687813102057,"results":"26","hashOfConfig":"16"},{"size":9532,"mtime":1687990891848,"results":"27","hashOfConfig":"16"},{"size":16938,"mtime":1688055640018,"results":"28","hashOfConfig":"16"},{"size":3390,"mtime":1688055420966,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},"bsxqy3",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"34"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/index.js",["77","78","79"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { LoadScript } from '@react-google-maps/api';\nimport Error from './error';\nimport Root from './routes/root';\nimport App from './components/app';\nimport AllChargers from './routes/allchargers';\nimport Reviews from './routes/reviews';\nimport { useState, useEffect } from 'react';\n\nconst URL = 'http://localhost:3000/fuel_stations';\n\nconst router = createBrowserRouter([\n  {\n    path: '/',\n    element: <Root />,\n    errorElement: <Error />,\n    children: [\n      {\n        path: '/',\n        element: <App />,\n      },\n      {\n        path: 'allchargers',\n        element: <AllChargers />,\n      },\n      {\n        path: 'reviews',\n        element: <Reviews />\n      },\n    ],\n  },\n]);\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <LoadScript googleMapsApiKey=\"AIzaSyDn7oQa4QsdEXc9GoIv5as8gMS8_uF73_4\"\n    libraries={['maps', 'places']}\n    >\n      <RouterProvider router={router} />\n    </LoadScript>\n  </React.StrictMode>\n);\n\nreportWebVitals();\n",[],"/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/reportWebVitals.js",[],[],"/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/error.jsx",[],[],"/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/routes/reviews.jsx",[],[],"/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/routes/root.jsx",[],[],"/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/routes/allchargers.jsx",["80"],[],"import Carddisplay from \"../components/carddisplay\"\nimport { useEffect,useState } from \"react\";\n\n\n\nconst URL = 'http://localhost:3000/fuel_stations';\n\nexport default function AllChargers() {\n    const [stations, setStations] = useState([]);\n    const [currentLocation, setCurrentLocation] = useState(null);\n    const [isLocationLoaded, setLocationLoaded] = useState(false);\n    const [searchLocation, setsearchLocation] = useState('')\n    const [testLocation, setTestLocation] = useState({})\n\n    useEffect(() => {\n        fetch(URL)\n          .then(response => response.json())\n          .then(data => setStations(data));\n      }, []);\n    \n      useEffect(() => {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(\n            (position) => {\n              const { latitude, longitude } = position.coords;\n              setCurrentLocation({ lat: latitude, lng: longitude });\n              setLocationLoaded(true);\n              setTestLocation(currentLocation)\n            },\n            (error) => {\n              console.error(\"Error getting current location:\", error);\n            }\n          );\n        } else {\n          console.error(\"Geolocation is not supported by this browser.\");\n        }\n      }, []); \n\n\n     // const allStations = stations.filter(station => station.station_name.toLowerCase().includes(searchLocation.toLowerCase()))\n\n\n\n    return (\n        <>\n       \n            <Carddisplay \n            \n            stations={stations.filter(station => station.street_address.toLowerCase().includes(searchLocation.toLowerCase()))} \n            currentLocation={currentLocation} \n            isLocationLoaded={isLocationLoaded} \n            setStations={setStations}\n            searchLocation = {searchLocation}\n            setsearchLocation = {setsearchLocation}\n            testLocation = {testLocation}\n            setTestLocation = {setTestLocation}\n            \n            \n            />\n        </>\n    )\n}\n\n\n","/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/app.jsx",["81"],[],"import React from 'react';\nimport Map from './map';\nimport Newstation from './Newstation';\nimport { useState,useEffect } from 'react';\n\n\n\n\nconst URL = 'http://localhost:3000/fuel_stations';\n\nexport default function App() {\n\n  const [stations, setStations] = useState([]);\n  \n\n  useEffect(() => {\n    fetch(URL)\n      .then(response => response.json())\n      .then(data => setStations(data));\n  }, []);\n\n\n\n\n  return (\n    <div className=\"ui raised segment\">\n      {/* <Header /> */}\n      <Map stations={stations}/>\n    \n      \n    </div>\n  );\n}\n","/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/nav.jsx",[],[],"/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/map.jsx",["82","83","84"],[],"/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/carddisplay.jsx",["85","86","87","88","89","90","91"],[],"/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/individualcard.jsx",[],[],"/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/Individualcard.jsx",["92","93","94","95","96","97"],[],"import React, { useState, useEffect } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Col from \"react-bootstrap/Col\";\nimport Image from \"react-bootstrap/Image\";\nimport { GoogleMap, Marker, InfoWindowF } from \"@react-google-maps/api\";\n\nconst URL = \"http://localhost:3000/fuel_stations\";\n\nexport default function Individualcard({\n  station,\n  stations,\n  setStations,\n  stationLatitude,\n  stationLongitude,\n  lat, \n  lng,\n}) {\n  const [showModal, setShowModal] = useState(false);\n  const [comment, setComment] = useState(\"\");\n  const [currentLocation, setCurrentLocation] = useState(null);\n  const [selectedStation, setSelectedStation] = useState(null);\n  const [distance, setDistance] = useState(null);\n  const [duration, setDuration] = useState(null);\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setCurrentLocation({ lat: latitude, lng: longitude });\n        },\n        (error) => {\n          console.error(\"Error getting current location:\", error);\n        }\n      );\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n\n  useEffect(() => {\n    if (selectedStation && currentLocation) {\n      const directionsService = new window.google.maps.DirectionsService();\n      const request = {\n        origin: currentLocation,\n        destination: {\n          lat: stationLatitude,\n          lng: stationLongitude,\n        },\n        travelMode: \"DRIVING\",\n        drivingOptions: {\n          departureTime: new Date(),\n        },\n      };\n      directionsService.route(request, handleDirectionsResponse);\n    }\n  }, [selectedStation, currentLocation]);\n\n  // const i = [stationLatitude, stationLongitude];\n  // console.log(i);\n\n  function handleDirectionsResponse(response, status) {\n    if (status === \"OK\") {\n      const leg = response.routes[0].legs[0];\n      setDistance(leg.distance.text);\n      setDuration(leg.duration.text);\n    } else {\n      console.error(\"Directions request failed:\", status);\n      setDistance(null);\n      setDuration(null);\n    }\n  }\n\n  function handleGetDirections(stationLatitude, stationLongitude) {\n    const origin = `${lat},${lng}`;\n      const destination = `${stationLatitude},${stationLongitude}`;\n      const directionsUrl = `https://www.google.com/maps/dir/?api=1&origin=${origin}&destination=${destination}`;\n      window.open(directionsUrl, \"_blank\");\n  }\n\n  function handleCommentChange(event) {\n    setComment(event.target.value);\n  }\n\n  function handleAddReview() {\n    setShowModal(true);\n  }\n\n  function handleCloseModal() {\n    setComment(\"\");\n    setShowModal(false);\n  }\n\n  function handleAddComment(e) {\n    e.preventDefault();\n    const updatedComments = station.comments\n      ? [...station.comments, comment]\n      : [comment];\n    const updatedStation = {\n      ...station,\n      comments: updatedComments,\n    };\n\n    fetch(`${URL}/${station.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({ comments: updatedComments }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        // Find the index of the updated station in the stations array\n        const updatedIndex = stations.findIndex((s) => s.id === station.id);\n\n        // Create a new stations array with the updated station\n        const updatedStations = [\n          ...stations.slice(0, updatedIndex),\n          updatedStation,\n          ...stations.slice(updatedIndex + 1),\n        ];\n\n        // Update the stations state with the updatedStations array\n        setStations(updatedStations);\n      })\n      .catch((error) => {\n        console.log(\"Error:\", error);\n      });\n\n    setShowModal(false);\n    setComment(\"\");\n  }\n  const containerStyle = {\n    width: \"100%\",\n    height: \"25vh\",\n  };\n\n  const desitantionMarkers = {\n    lat: stationLatitude,\n    lng: stationLongitude,\n  };\n\n  // console.log(desitantionMarkers);\n\n  return (\n    <>\n     <Card bg=\"white\" style={{ flex: \"1\" }}>\n        <Card.Header\n          style={{\n            textAlign: \"center\",\n            fontSize: \"22px\",\n            fontFamily: \"Helvetica Neue\",\n            fontStyle: \"normal\",\n            backgroundColor: \"black\",\n            color: \"white\",\n            whiteSpace: \"nowrap\",\n            textOverflow: \"ellipsis\",\n            overflow: \"hidden\",\n          }}\n        >\n          {station.station_name.split(\" - Tesla Supercharger\")}\n        </Card.Header>\n\n        <Card.Body>\n          <GoogleMap\n            mapContainerStyle={containerStyle}\n            center={desitantionMarkers}\n            zoom={15}\n          >\n            {currentLocation && (\n              <Marker\n                position={desitantionMarkers}\n                title=\"Station\"\n                onClick={(e) =>\n                  handleGetDirections(stationLatitude, stationLongitude)\n                }\n              />\n            )}\n          </GoogleMap>\n          <br></br>\n          <div>\n            <Card.Title>{`${station.street_address}`}</Card.Title>\n            <Card.Title>{`${station.city}, ${station.state} ${station.zip}`}</Card.Title>\n\n            <br />\n            <Card.Subtitle>\n              <span style={{ fontSize: \"16px\", fontWeight: \"bold\" }}>\n                Access\n              </span>\n              : {station.access_days_time}\n            </Card.Subtitle>\n            <Card.Subtitle>\n              <br />\n              <span style={{ fontSize: \"16px\", fontWeight: \"bold\" }}>\n                Distance\n              </span>\n              : {station.distance.toFixed(2)} Miles\n            </Card.Subtitle>\n            <br />\n\n            <Card.Subtitle>\n              <span style={{ fontSize: \"16px\", fontWeight: \"bold\" }}>\n                Pricing\n              </span>\n              : {station.ev_pricing}\n            </Card.Subtitle>\n          </div>\n        </Card.Body>\n\n        <div\n          style={{\n            marginTop: \"auto\",\n            marginBottom: \"1em\",\n            marginLeft: \"1em\",\n            marginRight: \"1em\",\n          }}\n        >\n          <Accordion defaultActiveKey=\"1\">\n            <Accordion.Item eventKey=\"0\">\n              <Accordion.Header>\n                <span\n                  style={{\n                    fontSize: \"16px\",\n                    fontWeight: \"bold\",\n                    textAlign: \"center\",\n                    marginRight: \"4px\",\n                  }}\n                >\n                  Reviews\n                </span>\n                {\"\\u00A0\"}\n                <Badge pill bg=\"secondary\">\n                  {station.comments ? station.comments.length : 0}\n                </Badge>\n              </Accordion.Header>\n              <Accordion.Body>\n                {station.comments && station.comments.length > 0 ? (\n                  station.comments.map((comment, index) => (\n                    <Alert key={index} variant=\"dark\">\n                      <Col xs={2} md={2}></Col>\n                      <Image src=\"./thumbnail.png\" circle />\n                      {\"\\u00A0\" + \"\\u00A0\"}\n                      {comment}\n                    </Alert>\n                  ))\n                ) : (\n                  <Alert variant=\"danger\">No Reviews Yet</Alert>\n                )}\n                <div className=\"d-grid gap-2\">\n                  <Button\n                    variant=\"dark\"\n                    onClick={handleAddReview}\n                    direction=\"horizontal\"\n                    justify=\"center\"\n                  >\n                    Add Review\n                  </Button>{\" \"}\n                </div>\n              </Accordion.Body>\n            </Accordion.Item>\n          </Accordion>\n        </div>\n\n        <div\n          className=\"d-grid gap-2\"\n          style={{ marginLeft: \"1em\", marginRight: \"1em\", marginBottom: \"1em\" }}\n        >\n          <Button\n            variant=\"dark\"\n            onClick={(e) =>\n              handleGetDirections(stationLatitude, stationLongitude)\n            }\n          >\n            Get Directions\n          </Button>{\" \"}\n        </div>\n      </Card>\n\n      <Modal\n        show={showModal}\n        onHide={handleCloseModal}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Add a Review\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Your Review</h4>\n          <Form>\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n              <Form.Control\n                as=\"textarea\"\n                rows={3}\n                value={comment}\n                onChange={handleCommentChange}\n                placeholder=\"Type Something...\"\n              />\n            </Form.Group>{\" \"}\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"dark\" onClick={handleAddComment}>\n            Submit\n          </Button>\n          <Button variant=\"dark\" onClick={handleCloseModal}>\n            Cancel\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n","/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/Newstation.jsx",["98"],[],"/Users/mordechaibronfin/Desktop/Development/code/phase-2/phase2Project/Find-a-Supercharger-Frontend/src/components/search.jsx",["99","100","101"],[],{"ruleId":"102","severity":1,"message":"103","line":13,"column":10,"nodeType":"104","messageId":"105","endLine":13,"endColumn":18},{"ruleId":"102","severity":1,"message":"106","line":13,"column":20,"nodeType":"104","messageId":"105","endLine":13,"endColumn":29},{"ruleId":"102","severity":1,"message":"107","line":15,"column":7,"nodeType":"104","messageId":"105","endLine":15,"endColumn":10},{"ruleId":"108","severity":1,"message":"109","line":37,"column":10,"nodeType":"110","endLine":37,"endColumn":12,"suggestions":"111"},{"ruleId":"102","severity":1,"message":"112","line":3,"column":8,"nodeType":"104","messageId":"105","endLine":3,"endColumn":18},{"ruleId":"102","severity":1,"message":"107","line":5,"column":7,"nodeType":"104","messageId":"105","endLine":5,"endColumn":10},{"ruleId":"102","severity":1,"message":"113","line":26,"column":10,"nodeType":"104","messageId":"105","endLine":26,"endColumn":16},{"ruleId":"102","severity":1,"message":"114","line":26,"column":18,"nodeType":"104","messageId":"105","endLine":26,"endColumn":27},{"ruleId":"102","severity":1,"message":"115","line":2,"column":16,"nodeType":"104","messageId":"105","endLine":2,"endColumn":22},{"ruleId":"102","severity":1,"message":"116","line":6,"column":8,"nodeType":"104","messageId":"105","endLine":6,"endColumn":12},{"ruleId":"102","severity":1,"message":"117","line":7,"column":8,"nodeType":"104","messageId":"105","endLine":7,"endColumn":14},{"ruleId":"102","severity":1,"message":"106","line":8,"column":20,"nodeType":"104","messageId":"105","endLine":8,"endColumn":29},{"ruleId":"102","severity":1,"message":"118","line":9,"column":8,"nodeType":"104","messageId":"105","endLine":9,"endColumn":26},{"ruleId":"102","severity":1,"message":"119","line":9,"column":30,"nodeType":"104","messageId":"105","endLine":9,"endColumn":46},{"ruleId":"102","severity":1,"message":"120","line":9,"column":48,"nodeType":"104","messageId":"105","endLine":9,"endColumn":57},{"ruleId":"102","severity":1,"message":"121","line":11,"column":29,"nodeType":"104","messageId":"105","endLine":11,"endColumn":40},{"ruleId":"102","severity":1,"message":"122","line":27,"column":27,"nodeType":"104","messageId":"105","endLine":27,"endColumn":45},{"ruleId":"102","severity":1,"message":"123","line":28,"column":10,"nodeType":"104","messageId":"105","endLine":28,"endColumn":18},{"ruleId":"102","severity":1,"message":"124","line":29,"column":10,"nodeType":"104","messageId":"105","endLine":29,"endColumn":18},{"ruleId":"108","severity":1,"message":"125","line":63,"column":6,"nodeType":"110","endLine":63,"endColumn":40,"suggestions":"126"},{"ruleId":"127","severity":1,"message":"128","line":249,"column":33,"nodeType":"129","messageId":"130","endLine":249,"endColumn":34},{"ruleId":"102","severity":1,"message":"131","line":4,"column":8,"nodeType":"104","messageId":"105","endLine":4,"endColumn":18},{"ruleId":"102","severity":1,"message":"103","line":1,"column":10,"nodeType":"104","messageId":"105","endLine":1,"endColumn":18},{"ruleId":"108","severity":1,"message":"132","line":20,"column":6,"nodeType":"110","endLine":20,"endColumn":23,"suggestions":"133"},{"ruleId":"102","severity":1,"message":"134","line":32,"column":13,"nodeType":"104","messageId":"105","endLine":32,"endColumn":23},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'URL' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentLocation'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTestLocation' needs the current value of 'currentLocation'.","ArrayExpression",["135"],"'Newstation' is defined but never used.","'center' is assigned a value but never used.","'setCenter' is assigned a value but never used.","'uuidv4' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","'PlacesAutocomplete' is defined but never used.","'geocodeByAddress' is defined but never used.","'getLatLng' is defined but never used.","'InfoWindowF' is defined but never used.","'setSelectedStation' is assigned a value but never used.","'distance' is assigned a value but never used.","'duration' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'stationLatitude' and 'stationLongitude'. Either include them or remove the dependency array.",["136"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'InputGroup' is defined but never used.","React Hook useEffect has missing dependencies: 'setLat' and 'setLng'. Either include them or remove the dependency array. If 'setLat' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["137"],"'addressArr' is assigned a value but never used.",{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},"Update the dependencies array to be: [currentLocation]",{"range":"144","text":"145"},"Update the dependencies array to be: [selectedStation, currentLocation, stationLatitude, stationLongitude]",{"range":"146","text":"147"},"Update the dependencies array to be: [currentLocation, setLat, setLng]",{"range":"148","text":"149"},[1249,1251],"[currentLocation]",[1989,2023],"[selectedStation, currentLocation, stationLatitude, stationLongitude]",[415,432],"[currentLocation, setLat, setLng]"]